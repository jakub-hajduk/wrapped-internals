[
  {
    "name": "aria-activedescendant",
    "idlName": "ariaActiveDescendantElement",
    "hasElementInternalsMember": true,
    "description": "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the currently active element when DOM focus is on a [`composite`](https://w3c.github.io/aria/#composite) widget, [`combobox`](https://w3c.github.io/aria/#combobox), [`textbox`](https://w3c.github.io/aria/#textbox), [`group`](https://w3c.github.io/aria/#group), or [`application`](https://w3c.github.io/aria/#application).\n\nThe `aria-activedescendant` property provides an alternative method of managing focus for interactive elements that might contain multiple focusable descendants, such as menus, grids, and toolbars. Instead of moving DOM focus among [accessibility descendants](#dfn-accessibility-descendant), authors _MAY_ set DOM focus on a container [element](https://dom.spec.whatwg.org/#concept-element) that supports `aria-activedescendant` and then use `aria-activedescendant` to refer to the element that is active.\n\nAuthors _MUST_ ensure that one of the following two sets of conditions is met when setting the value of `aria-activedescendant` on an element with DOM focus:\n\n1.  The value of `aria-activedescendant` refers to an [accessibility descendant](#dfn-accessibility-descendant).\n2.  The element with DOM focus is a [`combobox`](https://w3c.github.io/aria/#combobox), [`textbox`](https://w3c.github.io/aria/#textbox) or [`searchbox`](https://w3c.github.io/aria/#searchbox) with [`aria-controls`](https://w3c.github.io/aria/#aria-controls) referring to an element that supports `aria-activedescendant`, and the value of `aria-activedescendant` refers to an [accessibility descendant](#dfn-accessibility-descendant) of the controlled element. For example, in a [`combobox`](https://w3c.github.io/aria/#combobox), focus can remain on the [`combobox`](https://w3c.github.io/aria/#combobox) while the value of `aria-activedescendant` on the [`combobox`](https://w3c.github.io/aria/#combobox) element refers to a descendant of a popup [`listbox`](https://w3c.github.io/aria/#listbox) that is controlled by the [`combobox`](https://w3c.github.io/aria/#combobox).\n\nAuthors _SHOULD_ also ensure that the currently active descendant is visible and in view (or scrolls into view) when focused.",
      "raw": "Identifies the currently active element when DOM focus is on a composite widget, combobox, textbox, group, or application.\n\nThe aria-activedescendant property provides an alternative method of managing focus for interactive elements that might contain multiple focusable descendants, such as menus, grids, and toolbars. Instead of moving DOM focus among accessibility descendants, authors MAY set DOM focus on a container element that supports aria-activedescendant and then use aria-activedescendant to refer to the element that is active.\n\nAuthors MUST ensure that one of the following two sets of conditions is met when setting the value of aria-activedescendant on an element with DOM focus:\n\nThe value of aria-activedescendant refers to an accessibility descendant.\n\nThe element with DOM focus is a combobox, textbox or searchbox with aria-controls referring to an element that supports aria-activedescendant, and the value of aria-activedescendant refers to an accessibility descendant of the controlled element. For example, in a combobox, focus can remain on the combobox while the value of aria-activedescendant on the combobox element refers to a descendant of a popup listbox that is controlled by the combobox.\n\nAuthors SHOULD also ensure that the currently active descendant is visible and in view (or scrolls into view) when focused."
    },
    "usedInRoles": ["application", "combobox", "composite", "group", "textbox"],
    "relatedConcepts": ["SVG [SVG2] and DOM [DOM] active"],
    "inheritsIntoRoles": [
      "grid",
      "listbox",
      "menu",
      "menubar",
      "radiogroup",
      "row",
      "searchbox",
      "select",
      "spinbutton",
      "tablist",
      "toolbar",
      "tree",
      "treegrid"
    ],
    "type": {
      "type": "ID reference",
      "description": "Reference to the ID of another element in the same document",
      "values": []
    }
  },
  {
    "name": "aria-atomic",
    "idlName": "ariaAtomic",
    "hasElementInternalsMember": true,
    "description": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) whether [assistive technologies](#dfn-assistive-technologies) will present all, or only parts of, the changed region based on the change notifications defined by the [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) attribute.\n\nBoth [accessibility APIs](#dfn-accessibility-api) and the [Document Object Model](https://www.w3.org/TR/dom/) \\[[DOM](#bib-dom \"DOM Standard\")\\] provide events to allow the assistive technologies to determine changed areas of the document.\n\nWhen the content of a [live region](#dfn-live-region) changes, user agents _SHOULD_ examine the changed [element](https://dom.spec.whatwg.org/#concept-element) and traverse the ancestors to find the first element with [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic) set, and apply the appropriate behavior for the cases below.\n\n1.  If none of the ancestors have explicitly set [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic), the default is that [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic) is `false`, and assistive technologies will only present the changed node to the user.\n2.  If [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic) is explicitly set to `false`, assistive technologies will stop searching up the ancestor chain and present only the changed node to the user.\n3.  If [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic) is explicitly set to `true`, assistive technologies will present the entire contents of the element, including the author-defined live region label if one exists.\n\nWhen [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic) is `true`, assistive technologies can choose to combine several changes and present the entire changed region at once.",
      "raw": "Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute.\n\nBoth accessibility APIs and the Document Object Model [DOM] provide events to allow the assistive technologies to determine changed areas of the document.\n\nWhen the content of a live region changes, user agents SHOULD examine the changed element and traverse the ancestors to find the first element with aria-atomic set, and apply the appropriate behavior for the cases below.\n\n\nIf none of the ancestors have explicitly set aria-atomic, the default is that aria-atomic is false, and assistive technologies will only present the changed node to the user.\n\nIf aria-atomic is explicitly set to false, assistive technologies will stop searching up the ancestor chain and present only the changed node to the user.\n\nIf aria-atomic is explicitly set to true, assistive technologies will present the entire contents of the element, including the author-defined live region label if one exists.\n\nWhen aria-atomic is true, assistive technologies can choose to combine several changes and present the entire changed region at once."
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "Assistive technologies will present only the changed node or nodes.",
          "default": false
        },
        {
          "name": "true",
          "description": "Assistive technologies will present the entire changed region as a whole, including the author-defined label if one exists.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-autocomplete",
    "idlName": "ariaAutoComplete",
    "hasElementInternalsMember": true,
    "description": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) whether inputting text could trigger display of one or more predictions of the user's intended value for a [`combobox`](https://w3c.github.io/aria/#combobox), [`searchbox`](https://w3c.github.io/aria/#searchbox), or [`textbox`](https://w3c.github.io/aria/#textbox) and specifies how predictions would be presented if they were made.\n\nThe `aria-autocomplete` property describes the type of interaction model a [`textbox`](https://w3c.github.io/aria/#textbox), [`searchbox`](https://w3c.github.io/aria/#searchbox), or [`combobox`](https://w3c.github.io/aria/#combobox) employs when dynamically helping users complete text input. It distinguishes between two models: the inline model (`aria-autocomplete=\"inline\"`) that presents a value completion prediction inside the text input and the list model (`aria-autocomplete=\"list\"`) that presents a collection of possible values in a separate element that pops up adjacent to the text input. It is possible for an input to offer both models at the same time (`aria-autocomplete=\"both\"`).\n\nThe `aria-autocomplete` property is limited to describing predictive behaviors of an input element. Authors _SHOULD_ either omit specifying a value for `aria-autocomplete` or set `aria-autocomplete` to `none` if an input element provides one or more input proposals where none of the proposals are dependent on the specific input provided by the user. For instance, a combobox where the value of `aria-autocomplete` would be `none` is a search field that displays suggested values by listing the 5 most recently used search terms without any filtering of the list based on the user's input. Elements with a role that supports `aria-autocomplete` have a default value for `aria-autocomplete` of `none`.\n\nWhen an inline suggestion is made as a user types in an input, suggested text for completing the value of the field dynamically appears in the field after the input cursor, and the suggested value is accepted as the value of the input if the user performs an action that causes focus to leave the field. When an element has `aria-autocomplete` set to `inline` or `both`, authors _SHOULD_ ensure that the automatically suggested portion of the text is presented as selected text. This enables assistive technologies to distinguish between a user's input and the automatic suggestion and, in the event that the suggestion is not the desired value, enables the user to easily delete the suggestion or replace it by continuing to type.\n\nIf an element has `aria-autocomplete` set to `list` or `both`, authors _MUST_ ensure both of the following conditions are met:\n\n1.  The element has a value specified for [`aria-controls`](https://w3c.github.io/aria/#aria-controls) that refers to the element that contains the collection of suggested values.\n2.  The element has a value for [`aria-haspopup`](https://w3c.github.io/aria/#aria-haspopup) that matches the role of the element that contains the collection of suggested values.\n\nSome implementations of the list model require the user to perform an action, such as moving focus to the suggestion with the Down Arrow or clicking on the suggestion, in order to choose the suggestion. In such implementations, authors _MAY_ manage focus by either using [`aria-activedescendant`](https://w3c.github.io/aria/#aria-activedescendant) if the collection container supports it or by moving DOM focus to the suggestion. However, other implementations of the list model automatically highlight one suggestion as the selected value that will be accepted when the field loses focus, e.g., when the user presses the Tab key or clicks on a different field. If an element has `aria-autocomplete` set to `list` or `both`, and if a suggestion is automatically selected as the user provides input, authors _MUST_ ensure all the following conditions are met:\n\n1.  The collection of suggestions is presented in an element with a role that supports [`aria-activedescendant`](https://w3c.github.io/aria/#aria-activedescendant).\n2.  The value of `aria-activedescendant` set on the input field is dynamically adjusted to refer to the element containing the selected suggestion as described in the definition of [`aria-activedescendant`](https://w3c.github.io/aria/#aria-activedescendant).\n3.  DOM focus remains on the text input while the suggestions are displayed.\n\nThe `aria-autocomplete` property is not intended to indicate the presence of a completion suggestion, and authors _SHOULD NOT_ dynamically change its value in order to communicate the presence of a suggestion. When an element has `aria-autocomplete` set to `list` or `both`, authors _SHOULD_ use the [`aria-expanded`](https://w3c.github.io/aria/#aria-expanded) state to communicate whether the element that presents the suggestion collection is displayed.",
      "raw": "Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for a combobox, searchbox, or textbox and specifies how predictions would be presented if they were made.\n\nThe aria-autocomplete property describes the type of interaction model a textbox, searchbox, or combobox employs when dynamically helping users complete text input. It distinguishes between two models: the inline model (aria-autocomplete=\"inline\") that presents a value completion prediction inside the text input and the list model (aria-autocomplete=\"list\") that presents a collection of possible values in a separate element that pops up adjacent to the text input. It is possible for an input to offer both models at the same time (aria-autocomplete=\"both\").\n\nThe aria-autocomplete property is limited to describing predictive behaviors of an input element. Authors SHOULD either omit specifying a value for aria-autocomplete or set aria-autocomplete to none if an input element provides one or more input proposals where none of the proposals are dependent on the specific input provided by the user. For instance, a combobox where the value of aria-autocomplete would be none is a search field that displays suggested values by listing the 5 most recently used search terms without any filtering of the list based on the user's input. Elements with a role that supports aria-autocomplete have a default value for aria-autocomplete of none.\n\nWhen an inline suggestion is made as a user types in an input, suggested text for completing the value of the field dynamically appears in the field after the input cursor, and the suggested value is accepted as the value of the input if the user performs an action that causes focus to leave the field. When an element has aria-autocomplete set to inline or both, authors SHOULD ensure that the automatically suggested portion of the text is presented as selected text. This enables assistive technologies to distinguish between a user's input and the automatic suggestion and, in the event that the suggestion is not the desired value, enables the user to easily delete the suggestion or replace it by continuing to type.\n\nIf an element has aria-autocomplete set to list or both, authors MUST ensure both of the following conditions are met:\n\nThe element has a value specified for aria-controls that refers to the element that contains the collection of suggested values. The element has a value for aria-haspopup that matches the role of the element that contains the collection of suggested values.\n\nSome implementations of the list model require the user to perform an action, such as moving focus to the suggestion with the Down Arrow or clicking on the suggestion, in order to choose the suggestion. In such implementations, authors MAY manage focus by either using aria-activedescendant if the collection container supports it or by moving DOM focus to the suggestion. However, other implementations of the list model automatically highlight one suggestion as the selected value that will be accepted when the field loses focus, e.g., when the user presses the Tab key or clicks on a different field. If an element has aria-autocomplete set to list or both, and if a suggestion is automatically selected as the user provides input, authors MUST ensure all the following conditions are met:\n\nThe collection of suggestions is presented in an element with a role that supports aria-activedescendant.\n\nThe value of aria-activedescendant set on the input field is dynamically adjusted to refer to the element containing the selected suggestion as described in the definition of aria-activedescendant.\n\nDOM focus remains on the text input while the suggestions are displayed.\n\nThe aria-autocomplete property is not intended to indicate the presence of a completion suggestion, and authors SHOULD NOT dynamically change its value in order to communicate the presence of a suggestion. When an element has aria-autocomplete set to list or both, authors SHOULD use the aria-expanded state to communicate whether the element that presents the suggestion collection is displayed.\n"
    },
    "usedInRoles": ["combobox", "textbox"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["searchbox"],
    "type": {
      "type": "token",
      "description": "One of a limited set of allowed values. The default value is defined in each attribute's Values table, as specified in the\nAttribute Values section.",
      "values": [
        {
          "name": "inline",
          "description": "When a user is providing input, text suggesting one way to complete the provided input might be dynamically inserted after the caret.",
          "default": false
        },
        {
          "name": "list",
          "description": "When a user is providing input, an element containing a collection of values that could complete the provided input might be displayed.",
          "default": false
        },
        {
          "name": "both",
          "description": "When a user is providing input, an element containing a collection of values that could complete the provided input might be displayed. If displayed, one value in the collection is automatically selected, and the text needed to complete the automatically selected value appears after the caret in the input.",
          "default": false
        },
        {
          "name": "none",
          "description": "When a user is providing input, an automatic suggestion that attempts to predict how the user intends to complete the input is not displayed.",
          "default": true
        }
      ]
    }
  },
  {
    "name": "aria-braillelabel",
    "idlName": "ariaBrailleLabel",
    "hasElementInternalsMember": true,
    "description": "Defines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "107"
        },
        "chrome_android": {
          "version_added": "107"
        },
        "edge": {
          "version_added": "107"
        },
        "firefox": {
          "version_added": "125"
        },
        "firefox_android": {
          "version_added": "125"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "93"
        },
        "opera_android": {
          "version_added": "73"
        },
        "safari": {
          "version_added": "18"
        },
        "safari_ios": {
          "version_added": "18"
        },
        "samsunginternet_android": {
          "version_added": "21.0"
        },
        "webview_android": {
          "version_added": "107"
        },
        "webview_ios": {
          "version_added": "18"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a string value that labels the current element, which is intended to be converted into Braille. See related [`aria-label`](https://w3c.github.io/aria/#aria-label).\n\nThe purpose of [`aria-braillelabel`](https://w3c.github.io/aria/#aria-braillelabel) is similar to that of [`aria-label`](https://w3c.github.io/aria/#aria-label). It provides the user with a recognizable name of the object in Braille.\n\nThe [`aria-braillelabel`](https://w3c.github.io/aria/#aria-braillelabel) property gives authors the ability to override how assistive technologies localize and express the accessible name of an element in Braille. Thus inappropriately using [`aria-braillelabel`](https://w3c.github.io/aria/#aria-braillelabel) might inhibit users' ability to understand an element on braille interfaces. Authors _SHOULD_ limit use of [`aria-braillelabel`](https://w3c.github.io/aria/#aria-braillelabel) to instances where the name of an element when converted to Braille is not the desired user experience.\n\nWhen using `aria-braillelabel`, authors _SHOULD_ also ensure that:\n\n1.  The element to which `aria-braillelabel` is applied has a valid accessible name.\n2.  The value of `aria-braillelabel` is not empty or does not contain only [whitespace](https://infra.spec.whatwg.org/#ascii-whitespace) characters.\n3.  The value of `aria-braillelabel` does not contain any characters in [Unicode Braille Patterns](#dfn-unicode-braille) or consists of only characters in [Unicode Braille Patterns](#dfn-unicode-braille); the value does not only contain Braille Pattern dots-0.\n4.  The value of `aria-braillelabel` is not identical to the element's accessible name.\n\nAuthors _MUST NOT_ specify `aria-braillelabel` on an element which has an explicit or implicit WAI-ARIA role where `aria-braillelabel` is [prohibited](#prohibitedattributes).\n\nNote\n\nNote that [Assistive Technologies](#dfn-assistive-technologies) with braille support can convert the accessible name to Braille. In addition, assistive technologies will be able to customize such braille output according to user preferences. Using only the accessible name, e.g., from content or via `aria-label` is **almost always** the better user experience and authors are **strongly discouraged** from using `aria-braillelabel` to replicate `aria-label`. Instead, `aria-braillelabel` is meant to be used only if the accessible name cannot provide an adequate braille representation, i.e., when a specialized braille description is very different from a text description converted to Braille. It is very important to note that when using `aria-braillelabel`, authors are solely responsible for localizing the attribute value so that it aligns with the document language. In addition, authors need to design a way to clearly communicate the use of this attribute to the user. For example, this could be done in the product documentation. This is even more important when the value consists of Unicode Braille Patterns because [Assistive Technologies](#dfn-assistive-technologies) will pass such content directly to the user without applying user specific braille translations; in general, authors are **strongly discouraged** from using Unicode Braille Patterns in `aria-braillelabel`.\n\n[Assistive technologies](#dfn-assistive-technologies) _SHOULD_ use the value of `aria-braillelabel` when presenting the accessible name of an element in Braille, but _SHOULD NOT_ change other functionality. For example, an assistive technology that provides aural rendering _SHOULD_ use the accessible name.\n\n[Assistive technologies](#dfn-assistive-technologies) _SHOULD_ expose the `aria-braillelabel` property as follows:\n\n1.  If the value of `aria-braillelabel` does not contain characters in [Unicode Braille Patterns](#dfn-unicode-braille), translate the value according to the user's preferred translation table.\n2.  Otherwise, pass the value to the user without translation.\n\nThe following example shows the use of `aria-braillelabel` to customize a button's name in braille output.\n\n[Example 28](#example-28)\n\n    <button aria-braillelabel=\"****\">\n      <img alt=\"4 stars\" src=\"images/stars.jpg\">\n    </button>\n\nIn the previous example, a braille display would display \"btn \\*\\*\\*\\*\" in Braille rather than the verbose \"btn gra 4 stars\".",
      "raw": "\nDefines a string value that labels the current element, which is intended to be converted into Braille. See related aria-label. The purpose of aria-braillelabel is similar to that of aria-label. It provides the user with a recognizable name of the object in Braille.\n\nThe aria-braillelabel property gives authors the ability to override how assistive technologies localize and express the accessible name of an element in Braille. Thus inappropriately using aria-braillelabel might inhibit users' ability to understand an element on braille interfaces. Authors SHOULD limit use of aria-braillelabel to instances where the name of an element when converted to Braille is not the desired user experience.\n\nWhen using aria-braillelabel, authors SHOULD also ensure that:\n\nThe element to which aria-braillelabel is applied has a valid accessible name. The value of aria-braillelabel is not empty or does not contain only whitespace characters.\n\nThe value of aria-braillelabel does not contain any characters in Unicode Braille Patterns or consists of only characters in Unicode Braille Patterns; the value does not only contain Braille Pattern dots-0.\n\nThe value of aria-braillelabel is not identical to the element's accessible name.\n\nAuthors MUST NOT specify aria-braillelabel on an element which has an explicit or implicit WAI-ARIA role where aria-braillelabel is prohibited.\n\nNote Note that Assistive Technologies with braille support can convert the accessible name to Braille. In addition, assistive technologies will be able to customize such braille output according to user preferences. Using only the accessible name, e.g., from content or via aria-label is almost always the better user experience and authors are strongly discouraged from using aria-braillelabel to replicate aria-label. Instead, aria-braillelabel is meant to be used only if the accessible name cannot provide an adequate braille representation, i.e., when a specialized braille description is very different from a text description converted to Braille. It is very important to note that when using aria-braillelabel, authors are solely responsible for localizing the attribute value so that it aligns with the document language. In addition, authors need to design a way to clearly communicate the use of this attribute to the user. For example, this could be done in the product documentation. This is even more important when the value consists of Unicode Braille Patterns because Assistive Technologies will pass such content directly to the user without applying user specific braille translations; in general, authors are strongly discouraged from using Unicode Braille Patterns in aria-braillelabel.\n\nAssistive technologies SHOULD use the value of aria-braillelabel when presenting the accessible name of an element in Braille, but SHOULD NOT change other functionality. For example, an assistive technology that provides aural rendering SHOULD use the accessible name.\n\nAssistive technologies SHOULD expose the aria-braillelabel property as follows:\n\nIf the value of aria-braillelabel does not contain characters in Unicode Braille Patterns, translate the value according to the user's preferred translation table.\n\nOtherwise, pass the value to the user without translation.\n\nThe following example shows the use of aria-braillelabel to customize a button's name in braille output.\n\nExample 28 <button aria-braillelabel=\"****\"> <img alt=\"4 stars\" src=\"images/stars.jpg\"> </button>\n\nIn the previous example, a braille display would display \"btn ****\" in Braille rather than the verbose \"btn gra 4 stars\"."
    },
    "usedInRoles": [
      "All elements of the base markup except for the following roles: caption, code, definition, deletion, emphasis, generic, insertion, mark, none, paragraph, strong, subscript, suggestion, superscript, term, time"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-brailleroledescription",
    "idlName": "ariaBrailleRoleDescription",
    "hasElementInternalsMember": true,
    "description": "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "107"
        },
        "chrome_android": {
          "version_added": "107"
        },
        "edge": {
          "version_added": "107"
        },
        "firefox": {
          "version_added": "125"
        },
        "firefox_android": {
          "version_added": "125"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "93"
        },
        "opera_android": {
          "version_added": "73"
        },
        "safari": {
          "version_added": "18"
        },
        "safari_ios": {
          "version_added": "18"
        },
        "samsunginternet_android": {
          "version_added": "21.0"
        },
        "webview_android": {
          "version_added": "107"
        },
        "webview_ios": {
          "version_added": "18"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a human-readable, author-localized abbreviated description for the [role](#dfn-role) of an [element](https://dom.spec.whatwg.org/#concept-element), which is intended to be converted into Braille. See related [`aria-roledescription`](https://w3c.github.io/aria/#aria-roledescription).\n\nSome [assistive technologies](#dfn-assistive-technologies), such as screen readers, present the role of an element as part of the user experience. Such assistive technologies typically localize the name of the role, and they might customize it as well. Users of these assistive technologies depend on the presentation of the role name, such as \"region,\" \"button,\" or \"slider,\" for an understanding of the purpose of the element and, if it is a widget, how to interact with it.\n\nThe `aria-brailleroledescription` property gives authors the ability to override how [assistive technologies](#dfn-assistive-technologies) localize and express the name of a role in Braille. Thus inappropriately using `aria-brailleroledescription` might inhibit users' ability to understand or interact with an element on braille interfaces. Authors _SHOULD_ limit use of `aria-brailleroledescription` to clarifying the purpose of non-interactive container roles like [`group`](https://w3c.github.io/aria/#group) or [`region`](https://w3c.github.io/aria/#region), or to providing a _more specific_ description of a [`widget`](https://w3c.github.io/aria/#widget) in a braille context.\n\nAuthors _MUST NOT_ use `aria-brailleroledescription` without providing `aria-roledescription`. Additionally, as with `aria-roledescription`, authors _MUST NOT_ specify `aria-brailleroledescription` on an element which has an explicit or implicit WAI-ARIA role where `aria-brailleroledescription` is [prohibited](#prohibitedattributes).\n\nIn general, `aria-brailleroledescription` is only meant to be used in rare cases when a `aria-roledescription` is excessively verbose when rendered in Braille.\n\nWhen using `aria-brailleroledescription`, authors _SHOULD_ also ensure that:\n\n1.  The element to which `aria-brailleroledescription` is applied has a valid WAI-ARIA role or has an implicit WAI-ARIA role semantic.\n2.  The value of `aria-brailleroledescription` is not empty or does not contain only [whitespace](https://infra.spec.whatwg.org/#ascii-whitespace) characters.\n3.  The value of `aria-brailleroledescription` does not contain any characters in [Unicode Braille Patterns](#dfn-unicode-braille) or consists of only characters in [Unicode Braille Patterns](#dfn-unicode-braille); the value does not only contain Braille Pattern dots-0.\n4.  The value of `aria-brailleroledescription` should not be identical to the element's WAI-ARIA `aria-roledescription`, WAI-ARIA `role` or implicit WAI-ARIA role semantic.\n\nNote\n\nNote that [Assistive Technologies](#dfn-assistive-technologies) with braille support can convert `aria-roledescription` content to Braille. In addition, assistive technologies will be able to customize such braille output according to user preferences. Using only `aria-roledescription` is **almost always** the better user experience and authors are **strongly discouraged** from using `aria-brailleroledescription` to replicate `aria-roledescription`. Instead, `aria-brailleroledescription` is meant to be used only when `aria-roledescription` cannot provide an adequate braille representation, i.e., when a specialized braille description is very different from a text description converted to Braille. It is very important to note that when using `aria-brailleroledescription`, authors are solely responsible for localizing the attribute value so that it aligns with the document language. In addition, authors need to design a way to clearly communicate the use of this attribute to the user. For example, this could be done in the product documentation. This is even more important when the value consists of Unicode Braille Patterns because [Assistive Technologies](#dfn-assistive-technologies) will pass such content directly to the user without applying user specific braille translations; in general, authors are **strongly discouraged** from using Unicode Braille Patterns in `aria-brailleroledescription`.\n\nUser agents _MUST NOT_ expose the `aria-brailleroledescription` property if any of the following conditions exist:\n\n1.  The value of `aria-brailleroledescription` is empty or contains only whitespace characters, which includes standard [whitespace](https://infra.spec.whatwg.org/#ascii-whitespace) and the empty Braille pattern: dots-0 (U+2800).\n2.  The element to which `aria-brailleroledescription` is applied has an explicit or implicit WAI-ARIA role where `aria-brailleroledescription` is [prohibited](#prohibitedattributes).\n3.  The element to which `aria-brailleroledescription` is applied does not have a valid WAI-ARIA `aria-roledescription`.\n\n[Assistive technologies](#dfn-assistive-technologies) _SHOULD_ use the value of `aria-brailleroledescription` when presenting the role of an element in Braille, but _SHOULD NOT_ change other functionality based on the role of an element that has a value for `aria-brailleroledescription`. For example, an assistive technology that provides functions for navigating to the next [`region`](https://w3c.github.io/aria/#region) or [`button`](https://w3c.github.io/aria/#button) _SHOULD_ allow those functions to navigate to regions and buttons that have an `aria-brailleroledescription`.\n\n[Assistive technologies](#dfn-assistive-technologies) _SHOULD_ expose the `aria-brailleroledescription` property as follows:\n\n1.  If the value of `aria-brailleroledescription` does not contain characters in [Unicode Braille Patterns](#dfn-unicode-braille), translate the value according to the user's preferred translation table.\n2.  Otherwise, pass the value to the user without translation.\n\nThe following two examples show the use of `aria-brailleroledescription` to abbreviate the role of a repeated non-interactive \"slide\" container in a web-based presentation application.\n\n[Example 29](#example-29)\n\n    <div role=\"article\" aria-roledescription=\"slide\" aria-brailleroledescription=\"sld\" id=\"slide\" aria-labelledby=\"slideheading\">\n    <h1 id=\"slideheading\">Quarterly Report</h1>\n    <!-- remaining slide contents -->\n    </div>\n\n[Example 30](#example-30)\n\n    <article aria-roledescription=\"slide\" aria-brailleroledescription=\"sld\" id=\"slide\" aria-labelledby=\"slideheading\">\n    <h1 id=\"slideheading\">Quarterly Report</h1>\n    <!-- remaining slide contents -->\n    </div>\n\nIn the previous examples, a braille screen reader user would read \"sld Quarterly Report\" rather than the more verbose \"slide Quarterly Report.\"",
      "raw": "Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille. See related aria-roledescription.\n\nSome assistive technologies, such as screen readers, present the role of an element as part of the user experience. Such assistive technologies typically localize the name of the role, and they might customize it as well. Users of these assistive technologies depend on the presentation of the role name, such as \"region,\" \"button,\" or \"slider,\" for an understanding of the purpose of the element and, if it is a widget, how to interact with it.\n\nThe aria-brailleroledescription property gives authors the ability to override how assistive technologies localize and express the name of a role in Braille. Thus inappropriately using aria-brailleroledescription might inhibit users' ability to understand or interact with an element on braille interfaces. Authors SHOULD limit use of aria-brailleroledescription to clarifying the purpose of non-interactive container roles like group or region, or to providing a more specific description of a widget in a braille context.\n\nAuthors MUST NOT use aria-brailleroledescription without providing aria-roledescription. Additionally, as with aria-roledescription, authors MUST NOT specify aria-brailleroledescription on an element which has an explicit or implicit WAI-ARIA role where aria-brailleroledescription is prohibited.\n\nIn general, aria-brailleroledescription is only meant to be used in rare cases when a aria-roledescription is excessively verbose when rendered in Braille. When using aria-brailleroledescription, authors SHOULD also ensure that:\n\nThe element to which aria-brailleroledescription is applied has a valid WAI-ARIA role or has an implicit WAI-ARIA role semantic.\n\nThe value of aria-brailleroledescription is not empty or does not contain only whitespace characters.\n\nThe value of aria-brailleroledescription does not contain any characters in Unicode Braille Patterns or consists of only characters in Unicode Braille Patterns; the value does not only contain Braille Pattern dots-0.\n\nThe value of aria-brailleroledescription should not be identical to the element's WAI-ARIA aria-roledescription, WAI-ARIA role or implicit WAI-ARIA role semantic.\n\nNote Note that Assistive Technologies with braille support can convert aria-roledescription content to Braille. In addition, assistive technologies will be able to customize such braille output according to user preferences. Using only aria-roledescription is almost always the better user experience and authors are strongly discouraged from using aria-brailleroledescription to replicate aria-roledescription. Instead, aria-brailleroledescription is meant to be used only when aria-roledescription cannot provide an adequate braille representation, i.e., when a specialized braille description is very different from a text description converted to Braille. It is very important to note that when using aria-brailleroledescription, authors are solely responsible for localizing the attribute value so that it aligns with the document language. In addition, authors need to design a way to clearly communicate the use of this attribute to the user. For example, this could be done in the product documentation. This is even more important when the value consists of Unicode Braille Patterns because Assistive Technologies will pass such content directly to the user without applying user specific braille translations; in general, authors are strongly discouraged from using Unicode Braille Patterns in aria-brailleroledescription.\n\nUser agents MUST NOT expose the aria-brailleroledescription property if any of the following conditions exist:\n\nThe value of aria-brailleroledescription is empty or contains only whitespace characters, which includes standard whitespace and the empty Braille pattern: dots-0 (U+2800).\n\nThe element to which aria-brailleroledescription is applied has an explicit or implicit WAI-ARIA role where aria-brailleroledescription is prohibited.\n\nThe element to which aria-brailleroledescription is applied does not have a valid WAI-ARIA aria-roledescription.\n\nAssistive technologies SHOULD use the value of aria-brailleroledescription when presenting the role of an element in Braille, but SHOULD NOT change other functionality based on the role of an element that has a value for aria-brailleroledescription. For example, an assistive technology that provides functions for navigating to the next region or button SHOULD allow those functions to navigate to regions and buttons that have an aria-brailleroledescription.\n\nAssistive technologies SHOULD expose the aria-brailleroledescription property as follows:\n\nIf the value of aria-brailleroledescription does not contain characters in Unicode Braille Patterns, translate the value according to the user's preferred translation table.\n\nOtherwise, pass the value to the user without translation.\n\n\nThe following two examples show the use of aria-brailleroledescription to abbreviate the role of a repeated non-interactive \"slide\" container in a web-based presentation application.\n\n\nExample 29 <div role=\"article\" aria-roledescription=\"slide\" aria-brailleroledescription=\"sld\" id=\"slide\" aria-labelledby=\"slideheading\"> <h1 id=\"slideheading\">Quarterly Report</h1> <!-- remaining slide contents --> </div>\n\n\nExample 30 <article aria-roledescription=\"slide\" aria-brailleroledescription=\"sld\" id=\"slide\" aria-labelledby=\"slideheading\"> <h1 id=\"slideheading\">Quarterly Report</h1> <!-- remaining slide contents --> </div>\n\nIn the previous examples, a braille screen reader user would read \"sld Quarterly Report\" rather than the more verbose \"slide Quarterly Report.\""
    },
    "usedInRoles": [
      "All elements of the base markup except for the following roles: generic"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-colcount",
    "idlName": "ariaColCount",
    "hasElementInternalsMember": true,
    "description": "Defines the total number of columns in a table, grid, or treegrid. See related aria-colindex.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the total number of columns in a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex).\n\nIf all of the columns are present in the DOM, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute) as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the total number of columns. However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of columns in the full table.\n\nAuthors _MUST_ set the value of [`aria-colcount`](https://w3c.github.io/aria/#aria-colcount) to an integer equal to the number of columns in the full table. If the total number of columns is unknown, authors _MUST_ set the value of [`aria-colcount`](https://w3c.github.io/aria/#aria-colcount) to `-1` to indicate that the value should not be calculated by the user agent.\n\nThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user.\n\n[Example 31](#example-31)\n\n    <div role=\"grid\" aria-colcount=\"16\">\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n          <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n          <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n          <span role=\"columnheader\" aria-colindex=\"9\">Phone</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n          <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span>\n        </div>\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n          <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span>\n        </div>\n       …\n      </div>\n    </div>",
      "raw": "\nDefines the total number of columns in a table, grid, or treegrid. See related aria-colindex.\n\nIf all of the columns are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the total number of columns. However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of columns in the full table.\n\nAuthors MUST set the value of aria-colcount to an integer equal to the number of columns in the full table. If the total number of columns is unknown, authors MUST set the value of aria-colcount to -1 to indicate that the value should not be calculated by the user agent.\n\nThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user.\n\nExample 31 <div role=\"grid\" aria-colcount=\"16\"> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"columnheader\" aria-colindex=\"2\">First Name</span> <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span> <span role=\"columnheader\" aria-colindex=\"4\">Company</span> <span role=\"columnheader\" aria-colindex=\"9\">Phone</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Fred</span> <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span> <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span> <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span> </div> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Sara</span> <span role=\"gridcell\" aria-colindex=\"3\">James</span> <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span> <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span> </div> …\n</div> </div>\n"
    },
    "usedInRoles": ["table"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["grid", "treegrid"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-colindex",
    "idlName": "ariaColIndex",
    "hasElementInternalsMember": true,
    "description": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) an [element's](https://dom.spec.whatwg.org/#concept-element) column index or position with respect to the total number of columns within a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-colindextext`](https://w3c.github.io/aria/#aria-colindextext), [`aria-colcount`](https://w3c.github.io/aria/#aria-colcount), and [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan).\n\nIf all of the columns are present in the DOM, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute) as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the column index of each cell or [`gridcell`](https://w3c.github.io/aria/#gridcell). However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the column of each cell or gridcell with respect to the full table.\n\nAuthors _MUST_ set the value for [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) to an integer greater than or equal to 1, greater than the [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) value of any previous elements within the same row, and less than or equal to the number of columns in the full table. For a cell or gridcell which spans multiple columns, authors _MUST_ set the value of [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) to the start of the span.\n\nIf the set of columns which is present in the DOM is contiguous, and if there are no cells which span more than one row or column in that set, then authors _MAY_ place [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) on each row, setting the value to the index of the first column of the set. Otherwise, authors _SHOULD_ place [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) on all of the [accessibility children](#dfn-accessibility-child) of each row.\n\nThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. Because the set of columns is contiguous, [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) can be placed on each row.\n\n[Example 32](#example-32)\n\n    <div role=\"grid\" aria-colcount=\"16\">\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-colindex=\"2\">\n          <span role=\"columnheader\">First Name</span>\n          <span role=\"columnheader\">Last Name</span>\n          <span role=\"columnheader\">Company</span>\n          <span role=\"columnheader\">Address</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-colindex=\"2\">\n          <span role=\"gridcell\">Fred</span>\n          <span role=\"gridcell\">Jackson</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">123 Broad St.</span>\n        </div>\n        <div role=\"row\" aria-colindex=\"2\">\n          <span role=\"gridcell\">Sara</span>\n          <span role=\"gridcell\">James</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">123 Broad St.</span>\n        </div>\n       …\n      </div>\n    </div>\n\nThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. While the set of columns is contiguous, some of the cells span multiple rows. As a result, [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) needs to be placed on all of the [accessibility children](#dfn-accessibility-child) of each row.\n\n[Example 33](#example-33)\n\n    <div role=\"grid\" aria-colcount=\"16\">\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n          <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n          <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n          <span role=\"columnheader\" aria-colindex=\"5\">Address</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n          <span role=\"gridcell\" aria-colindex=\"4\" aria-rowspan=\"2\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-colindex=\"5\" aria-rowspan=\"2\">123 Broad St.</span>\n        </div>\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n        </div>\n       …\n      </div>\n    </div>\n\nThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user. Because the set of columns is non-contiguous, [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) needs to be placed on all of the [accessibility children](#dfn-accessibility-child) of each row.\n\n[Example 34](#example-34)\n\n    <div role=\"grid\" aria-colcount=\"16\">\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"columnheader\" aria-colindex=\"2\">First Name</span>\n          <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span>\n          <span role=\"columnheader\" aria-colindex=\"4\">Company</span>\n          <span role=\"columnheader\" aria-colindex=\"9\">Phone</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Fred</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span>\n          <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span>\n        </div>\n        <div role=\"row\">\n          <span role=\"gridcell\" aria-colindex=\"2\">Sara</span>\n          <span role=\"gridcell\" aria-colindex=\"3\">James</span>\n          <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span>\n        </div>\n       …\n      </div>\n    </div>",
      "raw": "Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid. See related aria-colindextext, aria-colcount, and aria-colspan.\n\nIf all of the columns are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the column index of each cell or gridcell. However, if only a portion of the columns is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the column of each cell or gridcell with respect to the full table.\n\nAuthors MUST set the value for aria-colindex to an integer greater than or equal to 1, greater than the aria-colindex value of any previous elements within the same row, and less than or equal to the number of columns in the full table. For a cell or gridcell which spans multiple columns, authors MUST set the value of aria-colindex to the start of the span.\n\nIf the set of columns which is present in the DOM is contiguous, and if there are no cells which span more than one row or column in that set, then authors MAY place aria-colindex on each row, setting the value to the index of the first column of the set. Otherwise, authors SHOULD place aria-colindex on all of the accessibility children of each row.\n\nThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. Because the set of columns is contiguous, aria-colindex can be placed on each row.\n\n\nExample 32 <div role=\"grid\" aria-colcount=\"16\"> <div role=\"rowgroup\"> <div role=\"row\" aria-colindex=\"2\"> <span role=\"columnheader\">First Name</span> <span role=\"columnheader\">Last Name</span> <span role=\"columnheader\">Company</span> <span role=\"columnheader\">Address</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\" aria-colindex=\"2\"> <span role=\"gridcell\">Fred</span> <span role=\"gridcell\">Jackson</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">123 Broad St.</span> </div> <div role=\"row\" aria-colindex=\"2\"> <span role=\"gridcell\">Sara</span> <span role=\"gridcell\">James</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">123 Broad St.</span> </div> …\n</div> </div>\n\nThe following example shows a grid with 16 columns, of which columns 2 through 5 are displayed to the user. While the set of columns is contiguous, some of the cells span multiple rows. As a result, aria-colindex needs to be placed on all of the accessibility children of each row.\n\n\nExample 33 <div role=\"grid\" aria-colcount=\"16\"> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"columnheader\" aria-colindex=\"2\">First Name</span> <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span> <span role=\"columnheader\" aria-colindex=\"4\">Company</span> <span role=\"columnheader\" aria-colindex=\"5\">Address</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Fred</span> <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span> <span role=\"gridcell\" aria-colindex=\"4\" aria-rowspan=\"2\">Acme, Inc.</span> <span role=\"gridcell\" aria-colindex=\"5\" aria-rowspan=\"2\">123 Broad St.</span> </div> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Sara</span> <span role=\"gridcell\" aria-colindex=\"3\">James</span> </div> …\n</div> </div>\n\nThe following example shows a grid with 16 columns, of which columns 2, 3, 4, and 9 are displayed to the user. Because the set of columns is non-contiguous, aria-colindex needs to be placed on all of the accessibility children of each row.\n\n\nExample 34 <div role=\"grid\" aria-colcount=\"16\"> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"columnheader\" aria-colindex=\"2\">First Name</span> <span role=\"columnheader\" aria-colindex=\"3\">Last Name</span> <span role=\"columnheader\" aria-colindex=\"4\">Company</span> <span role=\"columnheader\" aria-colindex=\"9\">Phone</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Fred</span> <span role=\"gridcell\" aria-colindex=\"3\">Jackson</span> <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span> <span role=\"gridcell\" aria-colindex=\"9\">555-1234</span> </div> <div role=\"row\"> <span role=\"gridcell\" aria-colindex=\"2\">Sara</span> <span role=\"gridcell\" aria-colindex=\"3\">James</span> <span role=\"gridcell\" aria-colindex=\"4\">Acme, Inc.</span> <span role=\"gridcell\" aria-colindex=\"9\">555-1235</span> </div> …\n</div> </div>\n"
    },
    "usedInRoles": ["cell", "row"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "gridcell", "rowheader"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-colindextext",
    "idlName": "ariaColIndexText",
    "hasElementInternalsMember": true,
    "description": "Defines a human readable text alternative of aria-colindex. See related aria-rowindextext.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "128"
        },
        "chrome_android": {
          "version_added": "128"
        },
        "edge": {
          "version_added": "128"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "114"
        },
        "opera_android": {
          "version_added": "85"
        },
        "safari": {
          "version_added": false
        },
        "safari_ios": {
          "version_added": false
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "128"
        },
        "webview_ios": {
          "version_added": false
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a human readable text alternative of [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex). See related [`aria-rowindextext`](https://w3c.github.io/aria/#aria-rowindextext).\n\nAuthors _SHOULD_ only use `aria-colindextext` when the provided or calculated value of [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) is not meaningful or does not reflect the displayed index, as is the case with spreadsheets and chess boards.\n\nAuthors _SHOULD NOT_ use `aria-colindextext` as a replacement for [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) because some assistive technologies rely upon the numeric column index for the purpose of keeping track of the user's position or providing alternative table navigation.\n\nNote\n\nUnlike [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex), `aria-colindextext` is not a supported property of [`row`](https://w3c.github.io/aria/#row) because user agents have no way to reliably calculate `aria-colindextext` for the purpose of exposing its value on the [`cell`](https://w3c.github.io/aria/#cell) or [`gridcell`](https://w3c.github.io/aria/#gridcell).",
      "raw": "\nDefines a human readable text alternative of aria-colindex. See related aria-rowindextext.\n\nAuthors SHOULD only use aria-colindextext when the provided or calculated value of aria-colindex is not meaningful or does not reflect the displayed index, as is the case with spreadsheets and chess boards.\n\nAuthors SHOULD NOT use aria-colindextext as a replacement for aria-colindex because some assistive technologies rely upon the numeric column index for the purpose of keeping track of the user's position or providing alternative table navigation.\n\nNote Unlike aria-colindex, aria-colindextext is not a supported property of row because user agents have no way to reliably calculate aria-colindextext for the purpose of exposing its value on the cell or gridcell.\n"
    },
    "usedInRoles": ["cell"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "rowheader"],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-colspan",
    "idlName": "ariaColSpan",
    "hasElementInternalsMember": true,
    "description": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the number of columns spanned by a cell or gridcell within a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-colindex`](https://w3c.github.io/aria/#aria-colindex) and [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan).\n\nThis [attribute](https://dom.spec.whatwg.org/#concept-attribute) is intended for cells and gridcells which are not contained in a native table. When defining the column span of cells or gridcells in a native table, authors _SHOULD_ use the host language's attribute instead of [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan). If [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan) is used on an element for which the host language provides an equivalent attribute, [user agents](https://infra.spec.whatwg.org/#user-agent) _MUST_ ignore the value of [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan) and instead expose the value of the host language's attribute to [assistive technologies](#dfn-assistive-technologies).\n\nAuthors _MUST_ set the value of [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan) to an integer greater than or equal to 1 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same row.",
      "raw": "Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-colindex and aria-rowspan.\n\nThis attribute is intended for cells and gridcells which are not contained in a native table. When defining the column span of cells or gridcells in a native table, authors SHOULD use the host language's attribute instead of aria-colspan. If aria-colspan is used on an element for which the host language provides an equivalent attribute, user agents MUST ignore the value of aria-colspan and instead expose the value of the host language's attribute to assistive technologies.\n\nAuthors MUST set the value of aria-colspan to an integer greater than or equal to 1 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same row.\n"
    },
    "usedInRoles": ["cell"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "rowheader"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-controls",
    "idlName": "ariaControlsElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the [element](https://dom.spec.whatwg.org/#concept-element) (or elements) whose contents or presence are controlled by the current element. See related [`aria-owns`](https://w3c.github.io/aria/#aria-owns).\n\nFor example:\n\n*   A table of contents tree view can control the content of a neighboring document pane.\n*   A group of checkboxes can control what commodity prices are tracked live in a table or graph.\n*   A tab controls the display of its associated tab panel.",
      "raw": "\nIdentifies the element (or elements) whose contents or presence are controlled by the current element. See related aria-owns. For example:\n\nA table of contents tree view can control the content of a neighboring document pane. A group of checkboxes can control what commodity prices are tracked live in a table or graph. A tab controls the display of its associated tab panel.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-describedby",
    "idlName": "ariaDescribedByElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the element (or elements) that describes the object. See related aria-labelledby and aria-description.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the [element](https://dom.spec.whatwg.org/#concept-element) (or elements) that describes the [object](#dfn-object). See related [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) and [`aria-description`](https://w3c.github.io/aria/#aria-description).\n\nThe [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) attribute is similar to [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby) in that both reference other elements to calculate a text alternative (an accessible name, and description, respectively). While a concise accessible name is preferable, a description can either be concise, or provide more verbose information.\n\nThe element or elements referenced by the aria-describedby comprise the entire description. Include ID references to multiple elements if necessary, or enclose a set of elements (e.g., paragraphs) with the element referenced by the ID.",
      "raw": "\nIdentifies the element (or elements) that describes the object. See related aria-labelledby and aria-description.\n\nThe aria-labelledby attribute is similar to aria-describedby in that both reference other elements to calculate a text alternative (an accessible name, and description, respectively). While a concise accessible name is preferable, a description can either be concise, or provide more verbose information.\n\n\nThe element or elements referenced by the aria-describedby comprise the entire description. Include ID references to multiple elements if necessary, or enclose a set of elements (e.g., paragraphs) with the element referenced by the ID.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [
      "<label> in HTML",
      "online help",
      "HTML table cell headers"
    ],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-description",
    "idlName": "ariaDescription",
    "hasElementInternalsMember": true,
    "description": "Defines a string value that describes or annotates the current element. See related aria-describedby.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "83"
        },
        "chrome_android": {
          "version_added": "83"
        },
        "edge": {
          "version_added": "83"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "10.0"
        },
        "opera": {
          "version_added": "69"
        },
        "opera_android": {
          "version_added": "59"
        },
        "safari": {
          "version_added": false
        },
        "safari_ios": {
          "version_added": false
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "83"
        },
        "webview_ios": {
          "version_added": false
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a string value that describes or annotates the current element. See related [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby).\n\nThe [`aria-description`](https://w3c.github.io/aria/#aria-description) attribute is similar to [`aria-label`](https://w3c.github.io/aria/#aria-label) in that both provide a flat string to associate with the element (an accessible description, and name, respectively). Unlike an accessible name, which is generally preferred to be concise, a description can provide more verbose information, as necessary.\n\nThe purpose of [`aria-description`](https://w3c.github.io/aria/#aria-description) is the same as that of [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby). It provides the user with additional descriptive text for the object. The most common [accessibility API](#dfn-accessibility-api) mapping for a description is the [accessible description](https://www.w3.org/TR/accname-1.2/#dfn-accessible-description) property. User agents _MUST_ give precedence to [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby) over [`aria-description`](https://w3c.github.io/aria/#aria-description) when computing the accessible description property.\n\nIn cases where providing a visible description is not the desired user experience, authors _MAY_ set the accessible description of the element using [`aria-description`](https://w3c.github.io/aria/#aria-description). However, if the description text is available in the DOM, authors _SHOULD NOT_ use [`aria-description`](https://w3c.github.io/aria/#aria-description), but should use one of the following instead:\n\n*   Authors _SHOULD_ use [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby) when the related description or annotation elements contain a simple, small description that is best experienced as a flat string, rather than by having the user navigate to them.\n*   Authors _SHOULD_ use [`aria-details`](https://w3c.github.io/aria/#aria-details) when the related description or annotation elements contain useful semantics or structure, or there is a lot of content within them, making it difficult to experience as a flat string. Using [`aria-details`](https://w3c.github.io/aria/#aria-details) will allow assistive technology users to visit the structured content and provide additional navigation commands, making it easier to understand the structure, or to experience the information in smaller pieces.",
      "raw": "\nDefines a string value that describes or annotates the current element. See related aria-describedby.\n\nThe aria-description attribute is similar to aria-label in that both provide a flat string to associate with the element (an accessible description, and name, respectively). Unlike an accessible name, which is generally preferred to be concise, a description can provide more verbose information, as necessary.\n\nThe purpose of aria-description is the same as that of aria-describedby. It provides the user with additional descriptive text for the object. The most common accessibility API mapping for a description is the accessible description property. User agents MUST give precedence to aria-describedby over aria-description when computing the accessible description property.\n\nIn cases where providing a visible description is not the desired user experience, authors MAY set the accessible description of the element using aria-description. However, if the description text is available in the DOM, authors SHOULD NOT use aria-description, but should use one of the following instead:\n\n\nAuthors SHOULD use aria-describedby when the related description or annotation elements contain a simple, small description that is best experienced as a flat string, rather than by having the user navigate to them.\n\nAuthors SHOULD use aria-details when the related description or annotation elements contain useful semantics or structure, or there is a lot of content within them, making it difficult to experience as a flat string. Using aria-details will allow assistive technology users to visit the structured content and provide additional navigation commands, making it easier to understand the structure, or to experience the information in smaller pieces.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": ["title attribute in HTML"],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-details",
    "idlName": "ariaDetailsElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the element (or elements) that provide additional information related to the object. See related aria-describedby.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the [element](https://dom.spec.whatwg.org/#concept-element) (or elements) that provide additional information related to the [object](#dfn-object). See related [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby).\n\nThe `aria-details` property is for referencing elements that provide more detailed information than would normally be provided via [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby). The presence of `aria-details` enables [assistive technologies](#dfn-assistive-technologies) to make users aware of the availability of extended information and navigate to it. Authors _SHOULD_ ensure that elements referenced by `aria-details` are visible to all users.\n\nAssistive technologies can use the role of elements referenced by the `aria-details` property to help users understand the types of information associated with the element. Authors _MAY_ convey the type of details associated with an element as follows:\n\n*   Comment: `aria-details` refers to an element with role [`comment`](https://w3c.github.io/aria/#comment).\n*   Definition: `aria-details` is applied to an element with role [`term`](https://w3c.github.io/aria/#term) and refers to an element with role [`definition`](https://w3c.github.io/aria/#definition).\n*   Caption: `aria-details` is applied to an element with role [`figure`](https://w3c.github.io/aria/#figure) and refers to an element with role [`caption`](https://w3c.github.io/aria/#caption), or an element within a `caption`.\n*   Footnote: `aria-details` refers to an element with role `doc-footnote`. This role is defined in \\[[DPUB-ARIA-1.0](#bib-dpub-aria-1.0 \"Digital Publishing WAI-ARIA Module 1.0\")\\].\n*   Endnote: `aria-details` refers to an element with role `doc-endnote`. This role is defined in \\[[DPUB-ARIA-1.0](#bib-dpub-aria-1.0 \"Digital Publishing WAI-ARIA Module 1.0\")\\].\n*   Description or general annotation: `aria-details` refers to an element with any other role.\n\nUnlike elements referenced by `aria-describedby`, elements referenced by `aria-details` are not used in the Accessible Description Computation as defined in the [Accessible Name and Description Computation](https://w3c.github.io/accname/) \\[[ACCNAME-1.2](#bib-accname-1.2 \"Accessible Name and Description Computation 1.2\")\\]. Thus, the content of elements referenced by `aria-details` are not flattened to a string when presented to assistive technology users. This makes `aria-details` particularly useful when converting the information to a string would cause a loss of information or make the extended information more difficult to understand.\n\nThe `aria-details` property supports referring to multiple elements. For example, a paragraph in a document editor might reference multiple comments that are not related to each other. If a user agent relies on an accessibility API that does not support exposing multiple descriptive relations, the user agent _SHOULD_ expose the relationship to the first element referenced by `aria-details`.\n\nIt is valid for an element to have both `aria-details` and a description specified with either `aria-describedby` or `aria-description`. If a user agent relies on an accessibility API that does not support exposing multiple descriptive relations, and if an element has both `aria-details` and [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby), the user agent _SHOULD_ expose the `aria-details` relation and the description string computed from the [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby) relationship.\n\nA common use for `aria-details` is in digital publishing where an extended description needs to be conveyed in a book that requires structural markup or the embedding of other technology to provide illustrative content. The following example demonstrates this scenario.\n\n[Example 35](#example-35)\n\n    <!-- Provision of an extended description -->\n    <img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\">\n    <details id=\"det\">\n      <summary>Example</summary>\n      <p>\n        The Pythagorean Theorem is a relationship in Euclidean Geometry between the three sides of\n        a right triangle, where the square of the hypotenuse is the sum of the squares of the two\n        opposing sides.\n      </p>\n      <p>\n        The following drawing illustrates an application of the Pythagorean Theorem when used to\n        construct a skateboard ramp.\n      </p>\n      <object data=\"skatebd-ramp.svg\"  type=\"image/svg+xml\"></object>\n      <p>\n        In this example you will notice a skateboard ramp with a base and vertical board whose width\n        is the width of the ramp. To compute how long the ramp must be, simply calculate the\n        base length, square it, sum it with the square of the height of the ramp, and take the\n        square root of the sum.\n      </p>\n    </details>\n\nAlternatively, `aria-details` can refer to a link to a web page having the extended description, as shown in the following example.\n\n[Example 36](#example-36)\n\n    <!-- Provision of an extended description -->\n    <img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\">\n    <p>\n      See an <a href=\"https://example.com/pt.html\" id=\"det\">Application of the Pythagorean Theorem</a>.\n    </p>",
      "raw": "\nIdentifies the element (or elements) that provide additional information related to the object. See related aria-describedby.\n\nThe aria-details property is for referencing elements that provide more detailed information than would normally be provided via aria-describedby. The presence of aria-details enables assistive technologies to make users aware of the availability of extended information and navigate to it. Authors SHOULD ensure that elements referenced by aria-details are visible to all users.\n\nAssistive technologies can use the role of elements referenced by the aria-details property to help users understand the types of information associated with the element. Authors MAY convey the type of details associated with an element as follows:\n\nComment: aria-details refers to an element with role comment. Definition: aria-details is applied to an element with role term and refers to an element with role definition.\n\nCaption: aria-details is applied to an element with role figure and refers to an element with role caption, or an element within a caption.\n\nFootnote: aria-details refers to an element with role doc-footnote. This role is defined in [DPUB-ARIA-1.0]. Endnote: aria-details refers to an element with role doc-endnote. This role is defined in [DPUB-ARIA-1.0]. Description or general annotation: aria-details refers to an element with any other role.\n\n\nUnlike elements referenced by aria-describedby, elements referenced by aria-details are not used in the Accessible Description Computation as defined in the Accessible Name and Description Computation [ACCNAME-1.2]. Thus, the content of elements referenced by aria-details are not flattened to a string when presented to assistive technology users. This makes aria-details particularly useful when converting the information to a string would cause a loss of information or make the extended information more difficult to understand.\n\nThe aria-details property supports referring to multiple elements. For example, a paragraph in a document editor might reference multiple comments that are not related to each other. If a user agent relies on an accessibility API that does not support exposing multiple descriptive relations, the user agent SHOULD expose the relationship to the first element referenced by aria-details.\n\nIt is valid for an element to have both aria-details and a description specified with either aria-describedby or aria-description. If a user agent relies on an accessibility API that does not support exposing multiple descriptive relations, and if an element has both aria-details and aria-describedby, the user agent SHOULD expose the aria-details relation and the description string computed from the aria-describedby relationship.\n\nA common use for aria-details is in digital publishing where an extended description needs to be conveyed in a book that requires structural markup or the embedding of other technology to provide illustrative content. The following example demonstrates this scenario.\n\n\nExample 35 <!-- Provision of an extended description --> <img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\"> <details id=\"det\"> <summary>Example</summary> <p> The Pythagorean Theorem is a relationship in Euclidean Geometry between the three sides of a right triangle, where the square of the hypotenuse is the sum of the squares of the two opposing sides. </p> <p> The following drawing illustrates an application of the Pythagorean Theorem when used to construct a skateboard ramp. </p> <object data=\"skatebd-ramp.svg\"  type=\"image/svg+xml\"></object> <p> In this example you will notice a skateboard ramp with a base and vertical board whose width is the width of the ramp. To compute how long the ramp must be, simply calculate the base length, square it, sum it with the square of the height of the ramp, and take the square root of the sum. </p> </details>\n\nAlternatively, aria-details can refer to a link to a web page having the extended description, as shown in the following example.\n\nExample 36 <!-- Provision of an extended description --> <img src=\"pythagorean.jpg\" alt=\"Pythagorean Theorem\" aria-details=\"det\"> <p> See an <a href=\"https://example.com/pt.html\" id=\"det\">Application of the Pythagorean Theorem</a>. </p>\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-dropeffect",
    "hasElementInternalsMember": false,
    "description": "[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target.",
    "compat": {
      "status": null,
      "support": null
    },
    "fullDescription": {
      "markdown": "\\[Deprecated in ARIA 1.1\\] Indicates what functions can be performed when a dragged object is released on the drop target.\n\nNote\n\nThe `aria-dropeffect` property is expected to be replaced by a new feature in a future version of WAI-ARIA. Authors are therefore advised to treat `aria-dropeffect` as [deprecated](#dfn-deprecated).\n\nThis [property](#dfn-property) allows assistive technologies to convey the possible drag options available to users, including whether a pop-up menu of choices is provided by the application. Typically, drop effect functions can only be provided once an object has been grabbed for a drag operation as the drop effect functions available are dependent on the object being dragged.\n\nMore than one drop effect can be supported for a given [element](https://dom.spec.whatwg.org/#concept-element). Therefore, the value of this [attribute](https://dom.spec.whatwg.org/#concept-attribute) is a space-separated set of tokens indicating the possible effects, or `none` if there is no supported operation. In addition to setting the [`aria-dropeffect`](https://w3c.github.io/aria/#aria-dropeffect) attribute, authors _SHOULD_ show a visual indication of potential drop targets.",
      "raw": "\n[Deprecated in ARIA 1.1] Indicates what functions can be performed when a dragged object is released on the drop target. Note The aria-dropeffect property is expected to be replaced by a new feature in a future version of WAI-ARIA. Authors are therefore advised to treat aria-dropeffect as deprecated.\n\nThis property allows assistive technologies to convey the possible drag options available to users, including whether a pop-up menu of choices is provided by the application. Typically, drop effect functions can only be provided once an object has been grabbed for a drag operation as the drop effect functions available are dependent on the object being dragged.\n\nMore than one drop effect can be supported for a given element. Therefore, the value of this attribute is a space-separated set of tokens indicating the possible effects, or none if there is no supported operation. In addition to setting the aria-dropeffect attribute, authors SHOULD show a visual indication of potential drop targets.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "token list",
      "description": "A list of one or more tokens.",
      "values": [
        {
          "name": "copy",
          "description": "A duplicate of the source object will be dropped into the target.",
          "default": false
        },
        {
          "name": "execute",
          "description": "A function supported by the drop target is executed, using the drag source as an input.",
          "default": false
        },
        {
          "name": "link",
          "description": "A reference or shortcut to the dragged object will be created in the target object.",
          "default": false
        },
        {
          "name": "move",
          "description": "The source object will be removed from its current location and dropped into the target.",
          "default": false
        },
        {
          "name": "none",
          "description": "No operation can be performed; effectively cancels the drag operation if an attempt is made to drop on this object. Ignored if combined with any other token value. e.g., 'none copy' is equivalent to a 'copy' value.",
          "default": true
        },
        {
          "name": "popup",
          "description": "There is a popup menu or dialog that allows the user to choose one of the drag operations (copy, move, link, execute) and any other drag functionality, such as cancel.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-errormessage",
    "idlName": "ariaErrorMessageElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the [element](https://dom.spec.whatwg.org/#concept-element) (or elements) that provides an error message for an [object](#dfn-object). See related [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) and [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby).\n\nThe `aria-errormessage` attribute references other elements that contain error message text. Authors _MUST_ use [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) in conjunction with `aria-errormessage`.\n\nWhen the value of an object is not valid, [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) is set to `true`, which indicates that the message contained by elements referenced by `aria-errormessage` is pertinent.\n\nWhen an object is in a valid state, it has either [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) set to `false` or it does not have the [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) attribute. Authors _MAY_ use `aria-errormessage` on an object that is currently valid, but only if the elements referenced by `aria-errormessage` are [hidden from all users](#dfn-hide-from-all-users), because the message they contain is not pertinent.\n\nWhen `aria-errormessage` is pertinent, authors _MUST_ ensure the content is not [hidden from all users](#dfn-hide-from-all-users) so users can navigate to and examine the error message. Similarly, when `aria-errormessage` is not pertinent, authors _MUST_ either ensure the content is [hidden from all users](#dfn-hide-from-all-users) or remove the `aria-errormessage` attribute or its value.\n\nUser agents _MUST NOT_ expose `aria-errormessage` for an object with an [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) value of `false`.\n\nAuthors _MAY_ call attention to a newly rendered error message with a live region by either applying an [`aria-live`](https://w3c.github.io/aria/#aria-live) property or using one of the [live region roles](#live_region_roles), such as [`alert`](https://w3c.github.io/aria/#alert). A live region is appropriate when an error message is displayed to users after they have provided an invalid value.\n\nA typical message describes what is wrong and informs users what is required. For example, an error message might be, Invalid time: the time must be between 9:00 AM and 5:00 PM. The following example code shows markup for an initial valid state and for a subsequent invalid state. Note the changes to [`aria-invalid`](https://w3c.github.io/aria/#aria-invalid) on the text input [object](#dfn-object), and to [`aria-live`](https://w3c.github.io/aria/#aria-live) on the [element](https://dom.spec.whatwg.org/#concept-element) containing the text of the error message:\n\n[Example 37](#example-37)\n\n    <!-- Initial valid state -->\n    <label for=\"startTime\"> Please enter a start time for the meeting: </label>\n    <input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" value=\"\" aria-invalid=\"false\">\n    <span id=\"msgID\" aria-live=\"assertive\"><span style=\"visibility:hidden\">Invalid time: the time must be between 9:00 AM and 5:00 PM</span></span>\n    \n    <!-- User has input an invalid value -->\n    <label for=\"startTime\"> Please enter a start time for the meeting: </label>\n    <input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" aria-invalid=\"true\" value=\"11:30 PM\" >\n    <span id=\"msgID\" aria-live=\"assertive\"><span style=\"visibility:visible\">Invalid time: the time must be between 9:00 AM and 5:00 PM</span></span>\n\nNote\n\nThis example uses `aria-live=\"assertive\"` to indicate that assistive technologies should immediately announce the error message rather than completing other queued announcements first. This increases the likelihood that users are aware of the error message before they move focus out of the input.\n\nNote\n\nThis state is being deprecated as a global state in ARIA 1.2. In future versions it will only be allowed on roles where it is specifically supported.",
      "raw": "\nIdentifies the element (or elements) that provides an error message for an object. See related aria-invalid and aria-describedby.\n\nThe aria-errormessage attribute references other elements that contain error message text. Authors MUST use aria-invalid in conjunction with aria-errormessage.\n\nWhen the value of an object is not valid, aria-invalid is set to true, which indicates that the message contained by elements referenced by aria-errormessage is pertinent.\n\nWhen an object is in a valid state, it has either aria-invalid set to false or it does not have the aria-invalid attribute. Authors MAY use aria-errormessage on an object that is currently valid, but only if the elements referenced by aria-errormessage are hidden from all users, because the message they contain is not pertinent.\n\nWhen aria-errormessage is pertinent, authors MUST ensure the content is not hidden from all users so users can navigate to and examine the error message. Similarly, when aria-errormessage is not pertinent, authors MUST either ensure the content is hidden from all users or remove the aria-errormessage attribute or its value.\n\nUser agents MUST NOT expose aria-errormessage for an object with an aria-invalid value of false.\n\nAuthors MAY call attention to a newly rendered error message with a live region by either applying an aria-live property or using one of the live region roles, such as alert. A live region is appropriate when an error message is displayed to users after they have provided an invalid value.\n\nA typical message describes what is wrong and informs users what is required. For example, an error message might be, Invalid time: the time must be between 9:00 AM and 5:00 PM. The following example code shows markup for an initial valid state and for a subsequent invalid state. Note the changes to aria-invalid on the text input object, and to aria-live on the element containing the text of the error message:\n\n\nExample 37 <!-- Initial valid state --> <label for=\"startTime\"> Please enter a start time for the meeting: </label> <input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" value=\"\" aria-invalid=\"false\"> <span id=\"msgID\" aria-live=\"assertive\"><span style=\"visibility:hidden\">Invalid time: the time must be between 9:00 AM and 5:00 PM</span></span>\n\n<!-- User has input an invalid value --> <label for=\"startTime\"> Please enter a start time for the meeting: </label> <input id=\"startTime\" type=\"text\" aria-errormessage=\"msgID\" aria-invalid=\"true\" value=\"11:30 PM\" > <span id=\"msgID\" aria-live=\"assertive\"><span style=\"visibility:visible\">Invalid time: the time must be between 9:00 AM and 5:00 PM</span></span>\n\nNote This example uses aria-live=\"assertive\" to indicate that assistive technologies should immediately announce the error message rather than completing other queued announcements first. This increases the likelihood that users are aware of the error message before they move focus out of the input.\n\nNoteThis state is being deprecated as a global state in ARIA 1.2. In future versions it will only be allowed on roles where it is specifically supported."
    },
    "usedInRoles": [
      "application",
      "checkbox",
      "combobox",
      "gridcell",
      "listbox",
      "radiogroup",
      "slider",
      "spinbutton",
      "textbox",
      "tree"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [
      "columnheader",
      "rowheader",
      "searchbox",
      "switch",
      "treegrid"
    ],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-flowto",
    "idlName": "ariaFlowToElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the next [element](https://dom.spec.whatwg.org/#concept-element) (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\n\nWhen [`aria-flowto`](https://w3c.github.io/aria/#aria-flowto) has a single ID reference, it allows [assistive technologies](#dfn-assistive-technologies) to, at the user's request, forego normal document reading order and go to the targeted [object](#dfn-object). However, when [`aria-flowto`](https://w3c.github.io/aria/#aria-flowto) is provided with multiple ID references, assistive technologies _SHOULD_ present the referenced elements as path choices.\n\nIn the case of one or more ID references, [user agents](https://infra.spec.whatwg.org/#user-agent) or assistive technologies _SHOULD_ give the user the option of navigating to any of the targeted elements. The name of the path can be determined by the name of the target element of the [`aria-flowto`](https://w3c.github.io/aria/#aria-flowto) [attribute](https://dom.spec.whatwg.org/#concept-attribute). [Accessibility APIs](#dfn-accessibility-api) can provide named path [relationships](#dfn-relationship).",
      "raw": "Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion, allows assistive technology to override the general default of reading in document source order.\n\nWhen aria-flowto has a single ID reference, it allows assistive technologies to, at the user's request, forego normal document reading order and go to the targeted object.\n\nHowever, when aria-flowto is provided with multiple ID references, assistive technologies SHOULD present the referenced elements as path choices.\n\nIn the case of one or more ID references, user agents or assistive technologies SHOULD give the user the option of navigating to any of the targeted elements. The name of the path can be determined by the name of the target element of the aria-flowto attribute. Accessibility APIs can provide named path relationships.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-haspopup",
    "idlName": "ariaHasPopup",
    "hasElementInternalsMember": true,
    "description": "Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an [element](https://dom.spec.whatwg.org/#concept-element).\n\nA popup element usually appears as a block of content that is on top of other content. Authors _MUST_ ensure that the role of the element that serves as the container for the popup content is [`menu`](https://w3c.github.io/aria/#menu), [`listbox`](https://w3c.github.io/aria/#listbox), [`tree`](https://w3c.github.io/aria/#tree), [`grid`](https://w3c.github.io/aria/#grid), or [`dialog`](https://w3c.github.io/aria/#dialog), and that the value of `aria-haspopup` matches the role of the popup container.\n\nFor the popup element to be keyboard accessible, authors _SHOULD_ ensure that the element that can trigger the popup is focusable, that there is a keyboard mechanism for opening the popup, and that the popup element manages focus of all its descendants as described in [Managing Focus](#managingfocus).\n\nThe `aria-haspopup` property is a token type. [User agents](https://infra.spec.whatwg.org/#user-agent) _MUST_ treat any value of `aria-haspopup` that is not included in the list of allowed values, including the empty string, as if the value `false` had been provided. To provide backward compatibility with ARIA 1.0 content, user agents _MUST_ treat an `aria-haspopup` value of `true` as equivalent to a value of `menu`.\n\n[Assistive technologies](#dfn-assistive-technologies) and user agents _SHOULD NOT_ expose the `aria-haspopup` property if it has a value of `false`.\n\nNote\n\nA [`tooltip`](https://w3c.github.io/aria/#tooltip) is not considered to be a popup in this context.\n\nNote\n\n`aria-haspopup` is most relevant to use when there is a visual indicator in the element that triggers the popup. For example, many controls styled with a downward pointing triangle, chevron, or ellipsis (three consecutive dots) have become standard visual indicators that a popup will display when the control is activated. If some functional difference is relevant to display to a sighted user by means of a different visual style, that functional difference is usually relevant to convey to users of assistive technology. If there is no visual indication that an element will trigger a popup, authors are advised to consider whether use of `aria-haspopup` is necessary, and avoid using it when it's not.\n\nNote\n\nThis property is being deprecated as a global property in ARIA 1.2. In future versions it will only be allowed on roles where it is specifically supported.",
      "raw": "\nIndicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.\n\nA popup element usually appears as a block of content that is on top of other content. Authors MUST ensure that the role of the element that serves as the container for the popup content is menu, listbox, tree, grid, or dialog, and that the value of aria-haspopup matches the role of the popup container.\n\nFor the popup element to be keyboard accessible, authors SHOULD ensure that the element that can trigger the popup is focusable, that there is a keyboard mechanism for opening the popup, and that the popup element manages focus of all its descendants as described in Managing Focus.\n\nThe aria-haspopup property is a token type. User agents MUST treat any value of aria-haspopup that is not included in the list of allowed values, including the empty string, as if the value false had been provided. To provide backward compatibility with ARIA 1.0 content, user agents MUST treat an aria-haspopup value of true as equivalent to a value of menu.\n\nAssistive technologies and user agents SHOULD NOT expose the aria-haspopup property if it has a value of false. NoteA tooltip is not considered to be a popup in this context. Note aria-haspopup is most relevant to use when there is a visual indicator in the element that triggers the popup. For example, many controls styled with a downward pointing triangle, chevron, or ellipsis (three consecutive dots) have become standard visual indicators that a popup will display when the control is activated. If some functional difference is relevant to display to a sighted user by means of a different visual style, that functional difference is usually relevant to convey to users of assistive technology. If there is no visual indication that an element will trigger a popup, authors are advised to consider whether use of aria-haspopup is necessary, and avoid using it when it's not.\n\nNoteThis property is being deprecated as a global property in ARIA 1.2. In future versions it will only be allowed on roles where it is specifically supported."
    },
    "usedInRoles": [
      "application",
      "button",
      "combobox",
      "gridcell",
      "link",
      "menuitem",
      "slider",
      "tab",
      "textbox",
      "treeitem"
    ],
    "relatedConcepts": ["aria-controls"],
    "inheritsIntoRoles": [
      "columnheader",
      "menuitemcheckbox",
      "menuitemradio",
      "rowheader",
      "searchbox"
    ],
    "type": {
      "type": "token",
      "description": "One of a limited set of allowed values. The default value is defined in each attribute's Values table, as specified in the\nAttribute Values section.",
      "values": [
        {
          "name": "false",
          "description": "Indicates the element does not have a popup.",
          "default": true
        },
        {
          "name": "true",
          "description": "Indicates the popup is a menu.",
          "default": false
        },
        {
          "name": "menu",
          "description": "Indicates the popup is a menu.",
          "default": false
        },
        {
          "name": "listbox",
          "description": "Indicates the popup is a listbox.",
          "default": false
        },
        {
          "name": "tree",
          "description": "Indicates the popup is a tree.",
          "default": false
        },
        {
          "name": "grid",
          "description": "Indicates the popup is a grid.",
          "default": false
        },
        {
          "name": "dialog",
          "description": "Indicates the popup is a dialog.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-keyshortcuts",
    "idlName": "ariaKeyShortcuts",
    "hasElementInternalsMember": true,
    "description": "Defines keyboard shortcuts that an author has implemented to activate or give focus to an element.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\nThe value of the `aria-keyshortcuts` attribute is a space-separated list of keyboard shortcuts that can be pressed to activate a command or textbox widget. The keys defined in the shortcuts represent the physical keys pressed and not the actual characters generated. Each keyboard shortcut consists of one or more tokens delimited by the plus sign (\"+\") representing zero or more modifier keys and exactly one non-modifier key that must be pressed simultaneously to activate the given shortcut.\n\nAuthors _MUST_ specify modifier keys exactly according to the [UI Events KeyboardEvent key Values](https://www.w3.org/TR/uievents-key/) spec \\[[uievents-key](#bib-uievents-key \"UI Events KeyboardEvent key Values\")\\] - for example, \"Alt\", \"Control\", \"Shift\", \"Meta\", or \"AltGraph\". Note that Meta corresponds to the Command key, and Alt to the Option key, on Apple computers.\n\nThe valid names for non-modifier keys are any printable character such as \"A\", \"B\", \"1\", \"2\", \"$\", \"Plus\" for a plus sign, \"Space\" for the spacebar, or the names of any other non-modifier key specified in the [UI Events KeyboardEvent key Values](https://www.w3.org/TR/uievents-key/) spec \\[[uievents-key](#bib-uievents-key \"UI Events KeyboardEvent key Values\")\\] - for example, \"Enter\", \"Tab\", \"ArrowRight\", \"PageDown\", \"Escape\", or \"F1\". The use of \"Space\" for the spacebar is an exception to the [UI Events KeyboardEvent key Values](https://www.w3.org/TR/uievents-key/) spec \\[[uievents-key](#bib-uievents-key \"UI Events KeyboardEvent key Values\")\\] as the space or spacebar key is encoded as `' '` and would be treated as a whitespace character.\n\nAuthors _MUST_ ensure modifier keys come first when they are part of a keyboard shortcut. Authors _MUST_ ensure that required non-modifier keys come last when they are part of a shortcut. The order of the modifier keys is not otherwise significant, so \"Alt+Shift+T\" and \"Shift+Alt+T\" are equivalent, but \"T+Shift+Alt\" is not valid because all of the modifier keys don't come first, and \"Alt\" is not valid because it doesn't include at least one non-modifier key.\n\nWhen specifying an alphabetic key, both the uppercase and lowercase variants are considered equivalent: \"a\" and \"A\" are the same.\n\nWhen implementing keyboard shortcuts authors should consider the keyboards they intend to support to avoid unintended results. Keyboard designs vary significantly based on the device used and the languages supported. For example, many modifier keys are used in conjunction with other keys to create common punctuation symbols, create number characters, swap keyboard sides on bilingual keyboards to switch languages, and perform a number of other functions.\n\nFor many supported keyboards, authors can prevent conflicts by avoiding keys other than ASCII letters, as number characters and common punctuation often require modifiers. Here, the keyboard shortcut entered does not equate to the key generated. For example, in French keyboard layouts, the number characters are not available until you press the Control key, so a keyboard shortcut defined as \"Control+2\" would be ambiguous as this is how one would type the \"2\" character on a French keyboard.\n\nIf the character used is determined by a modifier key, the author _MUST_ specify the actual key used to generate the character, that is generated by the key, and not the resulting character. This convention enables the assistive technology to accurately convey what keys must be used to generate the shortcut. For example, on most U.S. English keyboards, the percent sign \"%\" can be input by pressing Shift+5. The correct way to specify this shortcut is \"Shift+5\". It is incorrect to specify \"%\" or \"Shift+%\". However, note that on some international keyboards the percent sign might be an unmodified key, in which case \"%\" and \"Shift+%\" could be correct on those keyboards.\n\nIf the key that needs to be specified is illegal in the host language or would cause a string to be terminated, authors _MUST_ use the string escaping sequence of the host language to specify it. For example, the single-quote character can be encoded as \"&#39;\" in HTML.\n\nExamples of valid keyboard shortcuts include:\n\n*   \"A\"\n*   \"Shift+Space\"\n*   \"Control+Alt+.\"\n*   \"Control+Shift+&#39;\"\n*   \"Alt+Shift+P Control+F\"\n*   \"Meta+C Meta+Shift+C\"\n\nUser agents _MUST NOT_ change keyboard behavior in response to the `aria-keyshortcuts` attribute. Authors _MUST_ handle scripted keyboard events to process `aria-keyshortcuts`. The `aria-keyshortcuts` attribute exposes the existence of these shortcuts so that assistive technologies can communicate this information to users.\n\nAuthors _SHOULD_ provide a way to expose keyboard shortcuts so that all users can discover them, such as through the use of a tooltip. Authors _MUST_ ensure that `aria-keyshortcuts` applied to disabled elements are unavailable.\n\nAuthors _SHOULD_ avoid implementing shortcut keys that inhibit operating system, user agent, or assistive technology functionality. This requires the author to carefully consider both which keys to assign and the contexts and conditions in which the keys are available to the user. For guidance, see the keyboard shortcuts section of the [ARIA Authoring Practices Guide](https://www.w3.org/WAI/ARIA/apg/).\n\nAuthors _SHOULD_ consider whether the keyboard shortcut will be valid in each language and physical keyboard layout, and consider localizing the shortcut in languages, locales, and common hardware keyboard configurations.",
      "raw": "\nDefines keyboard shortcuts that an author has implemented to activate or give focus to an element.\n\nThe value of the aria-keyshortcuts attribute is a space-separated list of keyboard shortcuts that can be pressed to activate a command or textbox widget. The keys defined in the shortcuts represent the physical keys pressed and not the actual characters generated. Each keyboard shortcut consists of one or more tokens delimited by the plus sign (\"+\") representing zero or more modifier keys and exactly one non-modifier key that must be pressed simultaneously to activate the given shortcut.\n\nAuthors MUST specify modifier keys exactly according to the UI Events KeyboardEvent key Values spec [uievents-key] - for example, \"Alt\", \"Control\", \"Shift\", \"Meta\", or \"AltGraph\". Note that Meta corresponds to the Command key, and Alt to the Option key, on Apple computers.\n\nThe valid names for non-modifier keys are any printable character such as \"A\", \"B\", \"1\", \"2\", \"$\", \"Plus\" for a plus sign, \"Space\" for the spacebar, or the names of any other non-modifier key specified in the UI Events KeyboardEvent key Values spec [uievents-key] - for example, \"Enter\", \"Tab\", \"ArrowRight\", \"PageDown\", \"Escape\", or \"F1\". The use of \"Space\" for the spacebar is an exception to the UI Events KeyboardEvent key Values spec [uievents-key] as the space or spacebar key is encoded as ' ' and would be treated as a whitespace character.\n\nAuthors MUST ensure modifier keys come first when they are part of a keyboard shortcut. Authors MUST ensure that required non-modifier keys come last when they are part of a shortcut. The order of the modifier keys is not otherwise significant, so \"Alt+Shift+T\" and \"Shift+Alt+T\" are equivalent, but \"T+Shift+Alt\" is not valid because all of the modifier keys don't come first, and \"Alt\" is not valid because it doesn't include at least one non-modifier key.\n\nWhen specifying an alphabetic key, both the uppercase and lowercase variants are considered equivalent: \"a\" and \"A\" are the same.\n\nWhen implementing keyboard shortcuts authors should consider the keyboards they intend to support to avoid unintended results. Keyboard designs vary significantly based on the device used and the languages supported. For example, many modifier keys are used in conjunction with other keys to create common punctuation symbols, create number characters, swap keyboard sides on bilingual keyboards to switch languages, and perform a number of other functions.\n\nFor many supported keyboards, authors can prevent conflicts by avoiding keys other than ASCII letters, as number characters and common punctuation often require modifiers. Here, the keyboard shortcut entered does not equate to the key generated. For example, in French keyboard layouts, the number characters are not available until you press the Control key, so a keyboard shortcut defined as \"Control+2\" would be ambiguous as this is how one would type the \"2\" character on a French keyboard.\n\nIf the character used is determined by a modifier key, the author MUST specify the actual key used to generate the character, that is generated by the key, and not the resulting character. This convention enables the assistive technology to accurately convey what keys must be used to generate the shortcut. For example, on most U.S. English keyboards, the percent sign \"%\" can be input by pressing Shift+5. The correct way to specify this shortcut is \"Shift+5\". It is incorrect to specify \"%\" or \"Shift+%\". However, note that on some international keyboards the percent sign might be an unmodified key, in which case \"%\" and \"Shift+%\" could be correct on those keyboards.\n\nIf the key that needs to be specified is illegal in the host language or would cause a string to be terminated, authors MUST use the string escaping sequence of the host language to specify it. For example, the single-quote character can be encoded as \"&#39;\" in HTML.\n\nExamples of valid keyboard shortcuts include:\n\n\"A\" \"Shift+Space\" \"Control+Alt+.\" \"Control+Shift+&#39;\" \"Alt+Shift+P Control+F\" \"Meta+C Meta+Shift+C\"\n\nUser agents MUST NOT change keyboard behavior in response to the aria-keyshortcuts attribute. Authors MUST handle scripted keyboard events to process aria-keyshortcuts. The aria-keyshortcuts attribute exposes the existence of these shortcuts so that assistive technologies can communicate this information to users.\n\nAuthors SHOULD provide a way to expose keyboard shortcuts so that all users can discover them, such as through the use of a tooltip. Authors MUST ensure that aria-keyshortcuts applied to disabled elements are unavailable.\n\nAuthors SHOULD avoid implementing shortcut keys that inhibit operating system, user agent, or assistive technology functionality. This requires the author to carefully consider both which keys to assign and the contexts and conditions in which the keys are available to the user. For guidance, see the keyboard shortcuts section of the ARIA Authoring Practices Guide.\n\nAuthors SHOULD consider whether the keyboard shortcut will be valid in each language and physical keyboard layout, and consider localizing the shortcut in languages, locales, and common hardware keyboard configurations.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": ["Keyboard shortcut"],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-label",
    "idlName": "ariaLabel",
    "hasElementInternalsMember": true,
    "description": "Defines a string value that labels the current element. See related aria-labelledby.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a string value that labels the current element. See related [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby).\n\nThe purpose of [`aria-label`](https://w3c.github.io/aria/#aria-label) is the same as that of [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby). It provides the user with a recognizable name of the object. The most common [accessibility API](#dfn-accessibility-api) mapping for a label is the [accessible name](https://www.w3.org/TR/accname-1.2/#dfn-accessible-name) property.\n\nMost host languages provide an attribute that could be used to name the element (e.g., the `` `[title](https://html.spec.whatwg.org/multipage/dom.html#attr-title)` `` attribute in HTML), yet this could present a browser tooltip. In the cases where DOM content or a tooltip is undesirable, authors _MAY_ set the accessible name of the element using [`aria-label`](https://w3c.github.io/aria/#aria-label), if the element does not [prohibit](#prohibitedattributes) use of the attribute. If the label text is available in the DOM (i.e., typically visible text content), authors _SHOULD_ use [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) and _SHOULD NOT_ use [`aria-label`](https://w3c.github.io/aria/#aria-label). There might be instances where the name of an element cannot be determined programmatically from the DOM, and there are cases where referencing DOM content is not the desired user experience. Authors _MUST NOT_ specify `aria-label` on an element which has an explicit or implicit WAI-ARIA role where `aria-label` is [prohibited](#prohibitedattributes). As required by the [Accessible Name and Description Computation](https://w3c.github.io/accname/) \\[[ACCNAME-1.2](#bib-accname-1.2 \"Accessible Name and Description Computation 1.2\")\\], user agents give precedence to [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) over [`aria-label`](https://w3c.github.io/aria/#aria-label) when computing the accessible name property.",
      "raw": "\nDefines a string value that labels the current element. See related aria-labelledby.\n\nThe purpose of aria-label is the same as that of aria-labelledby. It provides the user with a recognizable name of the object. The most common accessibility API mapping for a label is the accessible name property.\n\nMost host languages provide an attribute that could be used to name the element (e.g., the title attribute in HTML), yet this could present a browser tooltip. In the cases where DOM content or a tooltip is undesirable, authors MAY set the accessible name of the element using aria-label, if the element does not prohibit use of the attribute. If the label text is available in the DOM (i.e., typically visible text content), authors SHOULD use aria-labelledby and SHOULD NOT use aria-label. There might be instances where the name of an element cannot be determined programmatically from the DOM, and there are cases where referencing DOM content is not the desired user experience. Authors MUST NOT specify aria-label on an element which has an explicit or implicit WAI-ARIA role where aria-label is prohibited. As required by the Accessible Name and Description Computation [ACCNAME-1.2], user agents give precedence to aria-labelledby over aria-label when computing the accessible name property.\n"
    },
    "usedInRoles": [
      "All elements of the base markup except for the following roles: caption, code, definition, deletion, emphasis, generic, insertion, mark, none, paragraph, strong, subscript, suggestion, superscript, term, time"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-labelledby",
    "idlName": "ariaLabelledByElements",
    "hasElementInternalsMember": true,
    "description": "Identifies the element (or elements) that labels the current element. See related aria-label and aria-describedby.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "135"
        },
        "chrome_android": {
          "version_added": "135"
        },
        "edge": {
          "version_added": "135"
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "120"
        },
        "opera_android": {
          "version_added": "89"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "135"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) the [element](https://dom.spec.whatwg.org/#concept-element) (or elements) that labels the current element. See related [`aria-label`](https://w3c.github.io/aria/#aria-label) and [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby).\n\nThe purpose of [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) is the same as that of [`aria-label`](https://w3c.github.io/aria/#aria-label). It provides the user with a recognizable name of the object. The most common [accessibility API](#dfn-accessibility-api) mapping for a label is the [accessible name](https://www.w3.org/TR/accname-1.2/#dfn-accessible-name) property.\n\nIf the interface is such that it is not possible to have a visible label on the screen, authors _SHOULD_ use [`aria-label`](https://w3c.github.io/aria/#aria-label) and _SHOULD NOT_ use [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby). Authors _MUST NOT_ specify `aria-labelledby` on an element which has an explicit or implicit WAI-ARIA role where `aria-labelledby` is [prohibited](#prohibitedattributes). As required by the [Accessible Name and Description Computation](https://w3c.github.io/accname/) \\[[ACCNAME-1.2](#bib-accname-1.2 \"Accessible Name and Description Computation 1.2\")\\], user agents give precedence to [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) over [`aria-label`](https://w3c.github.io/aria/#aria-label) when computing the accessible name property.\n\nThe [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) attribute is similar to [`aria-describedby`](https://w3c.github.io/aria/#aria-describedby) in that both reference other elements to calculate a text alternative (an accessible name, and description, respectively). While a concise accessible name is preferable, a description can either be concise, or provide more verbose information.\n\nNote\n\nThe expected spelling of this property in U.S. English is \"labeledby.\" However, the [accessibility API](#dfn-accessibility-api) features to which this property is mapped have established the \"labelledby\" spelling. This property is spelled that way to match the convention and minimize the difficulty for developers.",
      "raw": "\nIdentifies the element (or elements) that labels the current element. See related aria-label and aria-describedby.\n\nThe purpose of aria-labelledby is the same as that of aria-label. It provides the user with a recognizable name of the object. The most common accessibility API mapping for a label is the accessible name property.\n\nIf the interface is such that it is not possible to have a visible label on the screen, authors SHOULD use aria-label and SHOULD NOT use aria-labelledby. Authors MUST NOT specify aria-labelledby on an element which has an explicit or implicit WAI-ARIA role where aria-labelledby is prohibited. As required by the Accessible Name and Description Computation [ACCNAME-1.2], user agents give precedence to aria-labelledby over aria-label when computing the accessible name property.\n\nThe aria-labelledby attribute is similar to aria-describedby in that both reference other elements to calculate a text alternative (an accessible name, and description, respectively). While a concise accessible name is preferable, a description can either be concise, or provide more verbose information.\n\nNote The expected spelling of this property in U.S. English is \"labeledby.\" However, the accessibility API features to which this property is mapped have established the \"labelledby\" spelling. This property is spelled that way to match the convention and minimize the difficulty for developers.\n"
    },
    "usedInRoles": [
      "All elements of the base markup except for the following roles: caption, code, definition, deletion, emphasis, generic, insertion, mark, none, paragraph, strong, subscript, suggestion, superscript, term, time"
    ],
    "relatedConcepts": ["<label> in HTML"],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-level",
    "idlName": "ariaLevel",
    "hasElementInternalsMember": true,
    "description": "Defines the hierarchical level of an element within a structure.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the hierarchical level of an [element](https://dom.spec.whatwg.org/#concept-element) within a structure.\n\nThis can be applied inside trees to tree items, to headings inside a document, to nested grids, nested tablists and to other structural items that might appear inside a container or participate in an ownership hierarchy. The value for [`aria-level`](https://w3c.github.io/aria/#aria-level) is an integer greater than or equal to 1.\n\nLevels increase with depth. If the DOM ancestry does not accurately represent the level, authors _SHOULD_ explicitly define the [`aria-level`](https://w3c.github.io/aria/#aria-level) [attribute](https://dom.spec.whatwg.org/#concept-attribute).\n\nThis attribute is applied to elements that act as leaf nodes within the orientation of the set, for example, on elements with role [`treeitem`](https://w3c.github.io/aria/#treeitem) rather than elements with role [`group`](https://w3c.github.io/aria/#group). This means that multiple elements in a set can have the same value for this attribute. Although it would be less repetitive to provide a single value on the container, restricting this to leaf nodes ensures that there is a single way for [assistive technologies](#dfn-assistive-technologies) to use the attribute.\n\nIf the DOM ancestry accurately represents the level, the [user agent](https://infra.spec.whatwg.org/#user-agent) can calculate the level of an item from the document structure. This attribute can be used to provide an explicit indication of the level when that is not possible to calculate from the document structure or the [`aria-owns`](https://w3c.github.io/aria/#aria-owns) attribute. User agent support for automatic calculation of level might vary; authors _SHOULD_ test with [user agents](https://infra.spec.whatwg.org/#user-agent) and assistive technologies to determine whether this attribute is needed. If the author intends for the user agent to calculate the level, the author _SHOULD_ omit this attribute.\n\nNote\n\nIn the case of a [`treegrid`](https://w3c.github.io/aria/#treegrid), [`aria-level`](https://w3c.github.io/aria/#aria-level) is supported on elements with the role [`row`](https://w3c.github.io/aria/#row), not elements with role [`gridcell`](https://w3c.github.io/aria/#gridcell). At first glance, this might seem inconsistent with the application of [`aria-level`](https://w3c.github.io/aria/#aria-level) on [`treeitem`](https://w3c.github.io/aria/#treeitem) elements, but it is consistent in that the [`row`](https://w3c.github.io/aria/#row) acts as the leaf node within the vertical orientation of the [`grid`](https://w3c.github.io/aria/#grid), whereas the [`gridcell`](https://w3c.github.io/aria/#gridcell) is a leaf node within the horizontal orientation of each [`row`](https://w3c.github.io/aria/#row). Level is not supported on sets of cells within rows, so the [`aria-level`](https://w3c.github.io/aria/#aria-level) attribute is applied to the element with the role [`row`](https://w3c.github.io/aria/#row).\n\nNote\n\nOn elements with role [`heading`](https://w3c.github.io/aria/#heading), values for [`aria-level`](https://w3c.github.io/aria/#aria-level) above 6 can create difficulties for users. Also, at the time of this writing, most combinations of user agents and assistive technologies only support [`aria-level`](https://w3c.github.io/aria/#aria-level) integers 1-9 on headings.",
      "raw": "\nDefines the hierarchical level of an element within a structure.\n\nThis can be applied inside trees to tree items, to headings inside a document, to nested grids, nested tablists and to other structural items that might appear inside a container or participate in an ownership hierarchy. The value for aria-level is an integer greater than or equal to 1.\n\nLevels increase with depth. If the DOM ancestry does not accurately represent the level, authors SHOULD explicitly define the aria-level attribute.\n\nThis attribute is applied to elements that act as leaf nodes within the orientation of the set, for example, on elements with role treeitem rather than elements with role group. This means that multiple elements in a set can have the same value for this attribute. Although it would be less repetitive to provide a single value on the container, restricting this to leaf nodes ensures that there is a single way for assistive technologies to use the attribute.\n\nIf the DOM ancestry accurately represents the level, the user agent can calculate the level of an item from the document structure. This attribute can be used to provide an explicit indication of the level when that is not possible to calculate from the document structure or the aria-owns attribute. User agent support for automatic calculation of level might vary; authors SHOULD test with user agents and assistive technologies to determine whether this attribute is needed. If the author intends for the user agent to calculate the level, the author SHOULD omit this attribute.\n\nNote In the case of a treegrid, aria-level is supported on elements with the role row, not elements with role gridcell. At first glance, this might seem inconsistent with the application of aria-level on treeitem elements, but it is consistent in that the row acts as the leaf node within the vertical orientation of the grid, whereas the gridcell is a leaf node within the horizontal orientation of each row. Level is not supported on sets of cells within rows, so the aria-level attribute is applied to the element with the role row.\n\nNote On elements with role heading, values for aria-level above 6 can create difficulties for users. Also, at the time of this writing, most combinations of user agents and assistive technologies only support aria-level integers 1-9 on headings.\n"
    },
    "usedInRoles": ["comment", "heading", "row", "treeitem"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-live",
    "idlName": "ariaLive",
    "hasElementInternalsMember": true,
    "description": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) that an [element](https://dom.spec.whatwg.org/#concept-element) will be updated, and describes the types of updates the [user agents](https://infra.spec.whatwg.org/#user-agent), [assistive technologies](#dfn-assistive-technologies), and user can expect from the [live region](#dfn-live-region).\n\nThe values of this [attribute](https://dom.spec.whatwg.org/#concept-attribute) are expressed in degrees of importance. When regions are specified as `polite`, assistive technologies will notify users of updates but generally do not interrupt the current task, and updates take low priority. When regions are specified as `assertive`, assistive technologies will immediately notify the user, and could potentially clear the speech queue of previous updates.\n\nPoliteness levels are essentially an ordering mechanism for updates and serve as a strong suggestion to user agents or assistive technologies. The value can be overridden by user agents, assistive technologies, or the user. For example, if assistive technologies can determine that a change occurred in response to a key press or a mouse click, the assistive technologies might present that change immediately even if the value of the [`aria-live`](https://w3c.github.io/aria/#aria-live) attribute states otherwise.\n\nSince different users have different needs, it is up to the user to tweak his or her assistive technologies' response to a live region with a certain politeness level from the commonly defined baseline. Assistive technologies might choose to implement increasing and decreasing levels of granularity so that the user can exercise control over queues and interruptions.\n\nWhen the [property](#dfn-property) is not set on an [object](#dfn-object) that needs to send updates, the politeness level is the value of the nearest ancestor that sets the [`aria-live`](https://w3c.github.io/aria/#aria-live) attribute.\n\nThe [`aria-live`](https://w3c.github.io/aria/#aria-live) attribute is the primary determination for the order of presentation of changes to live regions. Implementations will also consider the default level of politeness in a [role](#dfn-role) when the [`aria-live`](https://w3c.github.io/aria/#aria-live) attribute is not set in the ancestor chain (e.g., [`log`](https://w3c.github.io/aria/#log) changes are `polite` by default). Items which are `assertive` will be presented immediately, followed by `polite` items. User agents or assistive technologies can choose to clear queued changes when an assertive change occurs. (e.g., changes in an assertive region can remove all currently queued changes)\n\nWhen live regions are marked as `polite`, assistive technologies _SHOULD_ announce updates at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing. When live regions are marked as `assertive`, assistive technologies _SHOULD_ notify the user immediately. Because an interruption might disorient users or cause them to not complete their current task, authors _SHOULD NOT_ use the assertive value unless the interruption is imperative.",
      "raw": "Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region.\n\nThe values of this attribute are expressed in degrees of importance. When regions are specified as polite, assistive technologies will notify users of updates but generally do not interrupt the current task, and updates take low priority. When regions are specified as assertive, assistive technologies will immediately notify the user, and could potentially clear the speech queue of previous updates.\n\nPoliteness levels are essentially an ordering mechanism for updates and serve as a strong suggestion to user agents or assistive technologies. The value can be overridden by user agents, assistive technologies, or the user. For example, if assistive technologies can determine that a change occurred in response to a key press or a mouse click, the assistive technologies might present that change immediately even if the value of the aria-live attribute states otherwise.\n\nSince different users have different needs, it is up to the user to tweak his or her assistive technologies' response to a live region with a certain politeness level from the commonly defined baseline. Assistive technologies might choose to implement increasing and decreasing levels of granularity so that the user can exercise control over queues and interruptions.\n\nWhen the property is not set on an object that needs to send updates, the politeness level is the value of the nearest ancestor that sets the aria-live attribute.\n\nThe aria-live attribute is the primary determination for the order of presentation of changes to live regions. Implementations will also consider the default level of politeness in a role when the aria-live attribute is not set in the ancestor chain (e.g., log changes are polite by default). Items which are assertive will be presented immediately, followed by polite items. User agents or assistive technologies can choose to clear queued changes when an assertive change occurs. (e.g., changes in an assertive region can remove all currently queued changes)\n\nWhen live regions are marked as polite, assistive technologies SHOULD announce updates at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing. When live regions are marked as assertive, assistive technologies SHOULD notify the user immediately. Because an interruption might disorient users or cause them to not complete their current task, authors SHOULD NOT use the assertive value unless the interruption is imperative.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "token",
      "description": "One of a limited set of allowed values. The default value is defined in each attribute's Values table, as specified in the\nAttribute Values section.",
      "values": [
        {
          "name": "assertive",
          "description": "Indicates that updates to the region have the highest priority and should be presented the user immediately.",
          "default": false
        },
        {
          "name": "off",
          "description": "Indicates that updates to the region should not be presented to the user unless the user is currently focused on that region.",
          "default": true
        },
        {
          "name": "polite",
          "description": "Indicates that updates to the region should be presented at the next graceful opportunity, such as at the end of speaking the current sentence or when the user pauses typing.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-modal",
    "idlName": "ariaModal",
    "hasElementInternalsMember": true,
    "description": "Indicates whether an element is modal when displayed.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) whether an [element](https://dom.spec.whatwg.org/#concept-element) is modal when displayed.\n\nThe [`aria-modal`](https://w3c.github.io/aria/#aria-modal) [attribute](https://dom.spec.whatwg.org/#concept-attribute) is used to indicate that the presence of a \"modal\" element precludes usage of other content on the page. For example, when a modal dialog is displayed, it is expected that the user's interaction is limited to the contents of the dialog, until the modal dialog loses focus or is no longer displayed.\n\nWhen a modal element is displayed, assistive technologies _SHOULD_ navigate to the element unless focus has explicitly been set elsewhere. Some assistive technologies limit navigation to the modal element's contents. If focus moves to an element outside the modal element, assistive technologies _SHOULD NOT_ limit navigation to the modal element.\n\nWhen a modal element is displayed, authors _MUST_ ensure the interface can be controlled using only descendants of the modal element. In other words, if a modal dialog has a close button, the button should be a descendant of the dialog. When a modal element is displayed, authors _SHOULD_ mark all other contents as inert (such as \"inert subtrees\" in HTML) if the ability to do so exists in the host language.",
      "raw": "\nIndicates whether an element is modal when displayed.\n\nThe aria-modal attribute is used to indicate that the presence of a \"modal\" element precludes usage of other content on the page. For example, when a modal dialog is displayed, it is expected that the user's interaction is limited to the contents of the dialog, until the modal dialog loses focus or is no longer displayed.\n\nWhen a modal element is displayed, assistive technologies SHOULD navigate to the element unless focus has explicitly been set elsewhere. Some assistive technologies limit navigation to the modal element's contents. If focus moves to an element outside the modal element, assistive technologies SHOULD NOT limit navigation to the modal element.\n\nWhen a modal element is displayed, authors MUST ensure the interface can be controlled using only descendants of the modal element. In other words, if a modal dialog has a close button, the button should be a descendant of the dialog. When a modal element is displayed, authors SHOULD mark all other contents as inert (such as \"inert subtrees\" in HTML) if the ability to do so exists in the host language.\n"
    },
    "usedInRoles": ["window"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["alertdialog", "dialog"],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "Element is not modal.",
          "default": true
        },
        {
          "name": "true",
          "description": "Element is modal.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-multiline",
    "idlName": "ariaMultiLine",
    "hasElementInternalsMember": true,
    "description": "Indicates whether a text box accepts multiple lines of input or only a single line.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) whether a text box accepts multiple lines of input or only a single line.\n\nNote\n\nIn most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line `<input type=\"text\">` element, the keystroke usually submits the form. When user has focus in a multi-line `<textarea>` element, the keystroke inserts a line break. The WAI-ARIA `textbox` role differentiates these types of boxes with the [`aria-multiline`](https://w3c.github.io/aria/#aria-multiline) attribute, so authors are advised to be aware of this distinction when designing the field.",
      "raw": "\nIndicates whether a text box accepts multiple lines of input or only a single line.\n\nNote In most user agent implementations, the default behavior of the ENTER or RETURN key is different between the single-line and multi-line text fields in HTML. When user has focus in a single-line <input type=\"text\"> element, the keystroke usually submits the form. When user has focus in a multi-line <textarea> element, the keystroke inserts a line break. The WAI-ARIA textbox role differentiates these types of boxes with the aria-multiline attribute, so authors are advised to be aware of this distinction when designing the field.\n"
    },
    "usedInRoles": ["textbox"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["searchbox"],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "This is a single-line text box.",
          "default": true
        },
        {
          "name": "true",
          "description": "This is a multi-line text box.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-multiselectable",
    "idlName": "ariaMultiSelectable",
    "hasElementInternalsMember": true,
    "description": "Indicates that the user can select more than one item from the current selectable descendants.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) that the user can select more than one item from the current selectable descendants.\n\nAuthors _SHOULD_ ensure that selected descendants have the [`aria-selected`](https://w3c.github.io/aria/#aria-selected) [attribute](https://dom.spec.whatwg.org/#concept-attribute) set to `true`, and selectable descendants that are not selected have the [`aria-selected`](https://w3c.github.io/aria/#aria-selected) attribute set to `false`. Authors _SHOULD NOT_ use the [`aria-selected`](https://w3c.github.io/aria/#aria-selected) attribute on descendants that are not selectable.\n\nNote\n\nLists and trees are examples of roles that might allow users to select more than one item at a time.",
      "raw": "\nIndicates that the user can select more than one item from the current selectable descendants.\n\nAuthors SHOULD ensure that selected descendants have the aria-selected attribute set to true, and selectable descendants that are not selected have the aria-selected attribute set to false. Authors SHOULD NOT use the aria-selected attribute on descendants that are not selectable.\n\nNoteLists and trees are examples of roles that might allow users to select more than one item at a time."
    },
    "usedInRoles": ["grid", "listbox", "tablist", "tree"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["treegrid"],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "Only one item can be selected.",
          "default": true
        },
        {
          "name": "true",
          "description": "More than one item in the widget can be selected at a time.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-orientation",
    "idlName": "ariaOrientation",
    "hasElementInternalsMember": true,
    "description": "Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) whether the element's orientation is horizontal, vertical, or unknown/ambiguous.\n\nNote\n\nIn ARIA 1.1, the default value for [`aria-orientation`](https://w3c.github.io/aria/#aria-orientation) changed from `horizontal` to `undefined`. Implicit defaults are defined on some roles (e.g., [`slider`](https://w3c.github.io/aria/#slider) defaults to horizontal; [`scrollbar`](https://w3c.github.io/aria/#scrollbar) defaults to vertical) but remain undefined on roles where an expected default orientation is ambiguous (e.g., [`radiogroup`](https://w3c.github.io/aria/#radiogroup)).",
      "raw": "\nIndicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. Note In ARIA 1.1, the default value for aria-orientation changed from horizontal to undefined. Implicit defaults are defined on some roles (e.g., slider defaults to horizontal; scrollbar defaults to vertical) but remain undefined on roles where an expected default orientation is ambiguous (e.g., radiogroup).\n"
    },
    "usedInRoles": [
      "scrollbar",
      "select",
      "separator",
      "slider",
      "tablist",
      "toolbar"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [
      "listbox",
      "menu",
      "menubar",
      "radiogroup",
      "tree",
      "treegrid"
    ],
    "type": {
      "type": "token",
      "description": "One of a limited set of allowed values. The default value is defined in each attribute's Values table, as specified in the\nAttribute Values section.",
      "values": [
        {
          "name": "horizontal",
          "description": "The element is oriented horizontally.",
          "default": false
        },
        {
          "name": "undefined",
          "description": "The element's orientation is unknown/ambiguous.",
          "default": true
        },
        {
          "name": "vertical",
          "description": "The element is oriented vertically.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-owns",
    "idlName": "ariaOwnsElements",
    "hasElementInternalsMember": true,
    "description": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": false
        },
        "chrome_android": {
          "version_added": false
        },
        "edge": {
          "version_added": false
        },
        "firefox": {
          "version_added": "136"
        },
        "firefox_android": {
          "version_added": "136"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": false
        },
        "opera_android": {
          "version_added": false
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": false
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Identifies](#dfn-identifies) an [element](https://dom.spec.whatwg.org/#concept-element) (or elements) in order to define a visual, functional, or contextual parent/child [relationship](#dfn-relationship) between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related [`aria-controls`](https://w3c.github.io/aria/#aria-controls).\n\nThe value of the [`aria-owns`](https://w3c.github.io/aria/#aria-owns) [attribute](https://dom.spec.whatwg.org/#concept-attribute) is a space-separated ID reference list that references one or more elements in the document by ID. The reason for adding [`aria-owns`](https://w3c.github.io/aria/#aria-owns) is to expose a parent/child contextual relationship to [assistive technologies](#dfn-assistive-technologies) that is otherwise impossible to infer from the DOM.\n\nIf an element has both [`aria-owns`](https://w3c.github.io/aria/#aria-owns) and DOM children then the order of the child elements with respect to the parent/child relationship is the DOM children first, then the elements referenced in [`aria-owns`](https://w3c.github.io/aria/#aria-owns). If the author intends that the DOM children are not first, then list the DOM children in [`aria-owns`](https://w3c.github.io/aria/#aria-owns) in the desired order. Authors _SHOULD NOT_ use [`aria-owns`](https://w3c.github.io/aria/#aria-owns) as a replacement for the DOM hierarchy. If the relationship is represented in the DOM, do not use [`aria-owns`](https://w3c.github.io/aria/#aria-owns).\n\nAuthors _MUST_ ensure that an element's ID is not specified in more than one other element's [`aria-owns`](https://w3c.github.io/aria/#aria-owns) attribute at any time. In other words, an element can have only one explicit owner. Authors _MUST NOT_ create circular references with [`aria-owns`](https://w3c.github.io/aria/#aria-owns). In the case of authoring error with [`aria-owns`](https://w3c.github.io/aria/#aria-owns), the user agent _MAY_ ignore some [`aria-owns`](https://w3c.github.io/aria/#aria-owns) element references in order to build a consistent model of the content.\n\nAuthors _MUST NOT_ specify [`aria-owns`](https://w3c.github.io/aria/#aria-owns) on an element which has [Presentational Children](#childrenArePresentational).",
      "raw": "Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship between DOM elements where the DOM hierarchy cannot be used to represent the relationship. See related aria-controls.\n\nThe value of the aria-owns attribute is a space-separated ID reference list that references one or more elements in the document by ID. The reason for adding aria-owns is to expose a parent/child contextual relationship to assistive technologies that is otherwise impossible to infer from the DOM.\n\nIf an element has both aria-owns and DOM children then the order of the child elements with respect to the parent/child relationship is the DOM children first, then the elements referenced in aria-owns. If the author intends that the DOM children are not first, then list the DOM children in aria-owns in the desired order. Authors SHOULD NOT use aria-owns as a replacement for the DOM hierarchy. If the relationship is represented in the DOM, do not use aria-owns.\n\nAuthors MUST ensure that an element's ID is not specified in more than one other element's aria-owns attribute at any time. In other words, an element can have only one explicit owner. Authors MUST NOT create circular references with aria-owns. In the case of authoring error with aria-owns, the user agent MAY ignore some aria-owns element references in order to build a consistent model of the content.\n\nAuthors MUST NOT specify aria-owns on an element which has Presentational Children."
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "ID reference list",
      "description": "A list of one or more ID references.",
      "values": []
    }
  },
  {
    "name": "aria-placeholder",
    "idlName": "ariaPlaceholder",
    "hasElementInternalsMember": true,
    "description": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n\nAuthors _SHOULD NOT_ use [`aria-placeholder`](https://w3c.github.io/aria/#aria-placeholder) instead of a label as their purposes are different: The label indicates what kind of information is expected. The placeholder text is a hint about the expected value. See related [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby) and [`aria-label`](https://w3c.github.io/aria/#aria-label).\n\nAuthors _SHOULD_ present this hint to the user by displaying the hint text at any time the control's value is the empty string. This includes cases where the control first receives focus, and when users remove a previously-entered value.\n\nNote\n\nAs is the case with the related `` `[placeholder](https://html.spec.whatwg.org/multipage/input.html#attr-input-placeholder)` `` attribute in HTML, use of placeholder text as a replacement for a displayed label can reduce the accessibility and usability of the control for a range of users including older users and users with cognitive, mobility, fine motor skill or vision impairments. While the hint given by the control's label is shown at all times, the short hint given in the placeholder attribute is only shown before the user enters a value. Furthermore, placeholder text might be mistaken for a pre-filled value, and as commonly implemented the default color of the placeholder text provides insufficient contrast and the lack of a separate visible label reduces the size of the hit region available for setting focus on the control.\n\nNote\n\nThe following examples do not use the HTML `label` element as it cannot be used to label HTML elements with `contenteditable`.\n\nThe following example shows a [`searchbox`](https://w3c.github.io/aria/#searchbox) in which the user has entered a value:\n\n[Example 40](#example-40)\n\n    <span id=\"label\">Birthday:</span>\n    <div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">03-14-1879</div>\n\nThe following example shows the same [`searchbox`](https://w3c.github.io/aria/#searchbox) in which the user has not yet entered a value or has removed a previously-entered value:\n\n[Example 41](#example-41)\n\n    <span id=\"label\">Birthday:</span>\n    <div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">MM-DD-YYYY</div>",
      "raw": "Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value. A hint could be a sample value or a brief description of the expected format.\n\nAuthors SHOULD NOT use aria-placeholder instead of a label as their purposes are different: The label indicates what kind of information is expected. The placeholder text is a hint about the expected value. See related aria-labelledby and aria-label.\n\nAuthors SHOULD present this hint to the user by displaying the hint text at any time the control's value is the empty string. This includes cases where the control first receives focus, and when users remove a previously-entered value.\n\nNote As is the case with the related placeholder attribute in HTML, use of placeholder text as a replacement for a displayed label can reduce the accessibility and usability of the control for a range of users including older users and users with cognitive, mobility, fine motor skill or vision impairments. While the hint given by the control's label is shown at all times, the short hint given in the placeholder attribute is only shown before the user enters a value. Furthermore, placeholder text might be mistaken for a pre-filled value, and as commonly implemented the default color of the placeholder text provides insufficient contrast and the lack of a separate visible label reduces the size of the hit region available for setting focus on the control.\n\nNoteThe following examples do not use the HTML label element as it cannot be used to label HTML elements with contenteditable. The following example shows a searchbox in which the user has entered a value:\n\nExample 40 <span id=\"label\">Birthday:</span> <div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">03-14-1879</div>\n\nThe following example shows the same searchbox in which the user has not yet entered a value or has removed a previously-entered value:\n\nExample 41 <span id=\"label\">Birthday:</span> <div contenteditable role=\"searchbox\" aria-labelledby=\"label\" aria-placeholder=\"MM-DD-YYYY\">MM-DD-YYYY</div>\n"
    },
    "usedInRoles": ["textbox"],
    "relatedConcepts": ["placeholder attribute in HTML"],
    "inheritsIntoRoles": ["searchbox"],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-posinset",
    "idlName": "ariaPosInSet",
    "hasElementInternalsMember": true,
    "description": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) an [element](https://dom.spec.whatwg.org/#concept-element)'s number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-setsize`](https://w3c.github.io/aria/#aria-setsize).\n\nIf all items in a set are present in the document structure, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute), as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the set size and position for each item. However, if only a portion of the set is present in the document structure at a given moment, this [property](#dfn-property) is needed to provide an explicit indication of an element's position.\n\nThe following example shows items 5 through 8 in a set of 16.\n\n[Example 42](#example-42)\n\n    <h2 id=\"label_fruit\"> Available Fruit </h2>\n    <ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li>\n    </ul>\n\nWhen specifying [`aria-posinset`](https://w3c.github.io/aria/#aria-posinset), authors _MUST_ specify a value that is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known. If authors specify [`aria-posinset`](https://w3c.github.io/aria/#aria-posinset), authors _MUST_ also specify a value for [`aria-setsize`](https://w3c.github.io/aria/#aria-setsize).\n\nWhen specifying `aria-posinset` on a [`menuitem`](https://w3c.github.io/aria/#menuitem), [`menuitemcheckbox`](https://w3c.github.io/aria/#menuitemcheckbox), or [`menuitemradio`](https://w3c.github.io/aria/#menuitemradio), authors _SHOULD_ set the value of `aria-posinset` with respect to the total number of items in the [`menu`](https://w3c.github.io/aria/#menu), excluding any separators.",
      "raw": "Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-setsize.\n\nIf all items in a set are present in the document structure, it is not necessary to set this attribute, as the user agent can automatically calculate the set size and position for each item. However, if only a portion of the set is present in the document structure at a given moment, this property is needed to provide an explicit indication of an element's position.\n\nThe following example shows items 5 through 8 in a set of 16.\n\nExample 42 <h2 id=\"label_fruit\"> Available Fruit </h2> <ul role=\"listbox\" aria-labelledby=\"label_fruit\"> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li> </ul>\n\nWhen specifying aria-posinset, authors MUST specify a value that is an integer greater than or equal to 1, and less than or equal to the size of the set when that size is known. If authors specify aria-posinset, authors MUST also specify a value for aria-setsize.\n\nWhen specifying aria-posinset on a menuitem, menuitemcheckbox, or menuitemradio, authors SHOULD set the value of aria-posinset with respect to the total number of items in the menu, excluding any separators.\n"
    },
    "usedInRoles": [
      "article",
      "comment",
      "listitem",
      "menuitem",
      "option",
      "radio",
      "row",
      "tab"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [
      "comment",
      "menuitemcheckbox",
      "menuitemradio",
      "treeitem"
    ],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-readonly",
    "idlName": "ariaReadOnly",
    "hasElementInternalsMember": true,
    "description": "Indicates that the element is not editable, but is otherwise operable. See related aria-disabled.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "Indicates that the [element](https://dom.spec.whatwg.org/#concept-element) is not editable, but is otherwise [operable](#dfn-operable). See related [`aria-disabled`](https://w3c.github.io/aria/#aria-disabled).\n\nThis means the user can read but not set the value of the [widget](#dfn-widget). Readonly elements are relevant to the user, and authors _SHOULD NOT_ restrict navigation to the element or its focusable descendants. Other actions such as copying the value of the element are also supported. This is in contrast to disabled elements, to which applications might not allow user navigation to descendants.\n\nExamples include:\n\n*   A form element which represents a constant.\n*   Row or column headers in a spreadsheet grid.\n*   The result of a calculation such as a shopping cart total.",
      "raw": "\nIndicates that the element is not editable, but is otherwise operable. See related aria-disabled.\n\nThis means the user can read but not set the value of the widget. Readonly elements are relevant to the user, and authors SHOULD NOT restrict navigation to the element or its focusable descendants. Other actions such as copying the value of the element are also supported. This is in contrast to disabled elements, to which applications might not allow user navigation to descendants.\n\nExamples include:\n\nA form element which represents a constant. Row or column headers in a spreadsheet grid. The result of a calculation such as a shopping cart total.\n"
    },
    "usedInRoles": [
      "checkbox",
      "combobox",
      "grid",
      "gridcell",
      "listbox",
      "radiogroup",
      "slider",
      "spinbutton",
      "textbox"
    ],
    "relatedConcepts": ["readonly attribute in HTML"],
    "inheritsIntoRoles": [
      "columnheader",
      "rowheader",
      "searchbox",
      "switch",
      "treegrid"
    ],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "The user can set the value of the element.",
          "default": true
        },
        {
          "name": "true",
          "description": "The user cannot change the value of the element.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-relevant",
    "idlName": "ariaRelevant",
    "hasElementInternalsMember": true,
    "description": "Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": false
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) what notifications the user agent will trigger when the [accessibility tree](#dfn-accessibility-tree) within a live region is modified. See related [`aria-atomic`](https://w3c.github.io/aria/#aria-atomic).\n\nThe [attribute](https://dom.spec.whatwg.org/#concept-attribute) is represented as a space-separated list of the following values: `additions`, `removals`, `text`; or a single catch-all value `all`.\n\nThis is used to describe [semantically](#dfn-semantics) meaningful changes, as opposed to merely presentational ones. For example, nodes that are removed from the top of a log are merely removed for purposes of creating room for other entries, and the removal of them does not have meaning. However, in the case of a buddy list, removal of a buddy name indicates that they are no longer online, and this is a meaningful [event](#dfn-event). In that case [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) will be set to `all`. When the [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) attribute is not provided, the default value, `additions text`, indicates that text modifications and node additions are relevant, but that node removals are irrelevant.\n\nNote\n\n[`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) values of removals or all are to be used sparingly. Assistive technologies only need to be informed of content removal when its removal represents an important change, such as a buddy leaving a chat room.\n\nNote\n\nText removals should only be considered relevant if one of the specified values is 'removals' or 'all'. For example, for a text change from 'foo' to 'bar' in a live region with a default [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) value, the text addition ('bar') would be spoken, but the text removal ('foo') would not.\n\n[`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) is an optional attribute of live regions. This is a suggestion to [assistive technologies](#dfn-assistive-technologies), but assistive technologies are not required to present changes of all the relevant types.\n\nWhen [`aria-relevant`](https://w3c.github.io/aria/#aria-relevant) is not defined, an element's value is inherited from the nearest ancestor with a defined value. Although the value is a [token list](#valuetype_token_list), inherited values are not additive; the value provided on a descendant element completely overrides any inherited value from an ancestor element.\n\nWhen text changes are denoted as relevant, user agents _MUST_ monitor any descendant node change that affects the [Accessible Name and Description Computation](https://w3c.github.io/accname/) \\[[ACCNAME-1.2](#bib-accname-1.2 \"Accessible Name and Description Computation 1.2\")\\] of the live region as if the accessible name were determined from contents ([nameFrom: contents](#namecalculation)). For example, a text change would be triggered if the HTML `alt` attribute of a contained image changed. However, no change would be triggered if there was a text change to a node outside the live region, even if that node was referenced (via [`aria-labelledby`](https://w3c.github.io/aria/#aria-labelledby)) by an element contained in the live region.",
      "raw": "\nIndicates what notifications the user agent will trigger when the accessibility tree within a live region is modified. See related aria-atomic.\n\nThe attribute is represented as a space-separated list of the following values: additions, removals, text; or a single catch-all value all.\n\nThis is used to describe semantically meaningful changes, as opposed to merely presentational ones. For example, nodes that are removed from the top of a log are merely removed for purposes of creating room for other entries, and the removal of them does not have meaning. However, in the case of a buddy list, removal of a buddy name indicates that they are no longer online, and this is a meaningful event. In that case aria-relevant will be set to all. When the aria-relevant attribute is not provided, the default value, additions text, indicates that text modifications and node additions are relevant, but that node removals are irrelevant.\n\nNote aria-relevant values of removals or all are to be used sparingly. Assistive technologies only need to be informed of content removal when its removal represents an important change, such as a buddy leaving a chat room.\n\nNote Text removals should only be considered relevant if one of the specified values is 'removals' or 'all'. For example, for a text change from 'foo' to 'bar' in a live region with a default aria-relevant value, the text addition ('bar') would be spoken, but the text removal ('foo') would not.\n\naria-relevant is an optional attribute of live regions. This is a suggestion to assistive technologies, but assistive technologies are not required to present changes of all the relevant types.\n\nWhen aria-relevant is not defined, an element's value is inherited from the nearest ancestor with a defined value. Although the value is a token list, inherited values are not additive; the value provided on a descendant element completely overrides any inherited value from an ancestor element.\n\nWhen text changes are denoted as relevant, user agents MUST monitor any descendant node change that affects the Accessible Name and Description Computation [ACCNAME-1.2] of the live region as if the accessible name were determined from contents (nameFrom: contents). For example, a text change would be triggered if the HTML alt attribute of a contained image changed. However, no change would be triggered if there was a text change to a node outside the live region, even if that node was referenced (via aria-labelledby) by an element contained in the live region.\n"
    },
    "usedInRoles": ["All elements of the base markup"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "token list",
      "description": "A list of one or more tokens.",
      "values": [
        {
          "name": "additions",
          "description": "Element nodes are added to the accessibility tree within the live region.",
          "default": false
        },
        {
          "name": "additions text",
          "description": "Equivalent to the combination of values, \"additions text\".",
          "default": true
        },
        {
          "name": "all",
          "description": "Equivalent to the combination of all values, \"additions removals text\".",
          "default": false
        },
        {
          "name": "removals",
          "description": "Text content, a text alternative, or an element node within the live region is removed from the accessibility tree.",
          "default": false
        },
        {
          "name": "text",
          "description": "Text content or a text alternative is added to any descendant in the accessibility tree of the live region.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-required",
    "idlName": "ariaRequired",
    "hasElementInternalsMember": true,
    "description": "Indicates that user input is required on the element before a form can be submitted.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) that user input is required on the [element](https://dom.spec.whatwg.org/#concept-element) before a form can be submitted.\n\nFor example, if the user needs to fill in an address field, the author will need to set the field's [`aria-required`](https://w3c.github.io/aria/#aria-required) attribute to `true`.\n\nNote\n\nThe fact that the element is required is often presented visually (such as a sign or symbol after the [widget](#dfn-widget)). Using the [`aria-required`](https://w3c.github.io/aria/#aria-required) [attribute](https://dom.spec.whatwg.org/#concept-attribute) allows the author to explicitly convey to [assistive technologies](#dfn-assistive-technologies) that an element is required.\n\nUnless an exactly equivalent native attribute is available, host languages _SHOULD_ allow authors to use the [`aria-required`](https://w3c.github.io/aria/#aria-required) attribute on host language form elements that require input or selection by the user.",
      "raw": "\nIndicates that user input is required on the element before a form can be submitted. For example, if the user needs to fill in an address field, the author will need to set the field's aria-required attribute to true. Note The fact that the element is required is often presented visually (such as a sign or symbol after the widget). Using the aria-required attribute allows the author to explicitly convey to assistive technologies that an element is required.\n\nUnless an exactly equivalent native attribute is available, host languages SHOULD allow authors to use the aria-required attribute on host language form elements that require input or selection by the user.\n"
    },
    "usedInRoles": [
      "checkbox",
      "combobox",
      "gridcell",
      "listbox",
      "radiogroup",
      "spinbutton",
      "textbox",
      "tree"
    ],
    "relatedConcepts": ["required attribute in HTML"],
    "inheritsIntoRoles": [
      "columnheader",
      "rowheader",
      "searchbox",
      "switch",
      "treegrid"
    ],
    "type": {
      "type": "true/false",
      "description": "Value representing either true or false. The default value for this value type is false unless otherwise specified.",
      "values": [
        {
          "name": "false",
          "description": "User input is not necessary to submit the form.",
          "default": true
        },
        {
          "name": "true",
          "description": "Users need to provide input on an element before a form is submitted.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-roledescription",
    "idlName": "ariaRoleDescription",
    "hasElementInternalsMember": true,
    "description": "Defines a human-readable, author-localized description for the role of an element.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a human-readable, author-localized description for the [role](#dfn-role) of an [element](https://dom.spec.whatwg.org/#concept-element).\n\nSome [assistive technologies](#dfn-assistive-technologies), such as screen readers, present the role of an element as part of the user experience. Such assistive technologies typically localize the name of the role, and they might customize it as well. Users of these assistive technologies depend on the presentation of the role name, such as \"region,\" \"button,\" or \"slider,\" for an understanding of the purpose of the element and, if it is a widget, how to interact with it.\n\nThe `aria-roledescription` property gives authors the ability to override how assistive technologies localize and express the name of a role. Thus inappropriately using `aria-roledescription` might inhibit users' ability to understand or interact with an element. Authors _SHOULD_ limit use of `aria-roledescription` to clarifying the purpose of non-interactive container roles like [`group`](https://w3c.github.io/aria/#group) or [`region`](https://w3c.github.io/aria/#region), or to providing a _more specific_ description of a [`widget`](https://w3c.github.io/aria/#widget).\n\nWhen using `aria-roledescription`, authors _SHOULD_ also ensure that:\n\n1.  The element to which `aria-roledescription` is applied has a valid WAI-ARIA role or has an implicit WAI-ARIA role semantic.\n2.  The value of `aria-roledescription` is not empty or does not contain only [whitespace](https://infra.spec.whatwg.org/#ascii-whitespace) characters.\n\nNote\n\nDepending on the assistive technology, user verbosity settings, or other factors, certain elements' role descriptions might not be conveyed. If specifying `aria-roledescription` on such elements, then the custom role descriptions might also not be conveyed by these assistive technologies.\n\nAdditionally, authors _MUST NOT_ specify `aria-roledescription` on an element which has an explicit or implicit WAI-ARIA role where `aria-roledescription` is [prohibited](#prohibitedattributes).\n\nUser agents _MUST NOT_ expose the `aria-roledescription` property if any of the following conditions exist:\n\n1.  The element to which `aria-roledescription` is applied has an explicit or implicit WAI-ARIA role where `aria-roledescription` is [prohibited](#prohibitedattributes).\n2.  The value of `aria-roledescription` is undefined or the empty string.\n\n[Assistive technologies](#dfn-assistive-technologies) _SHOULD_ use the value of `aria-roledescription` when presenting the role of an element, but _SHOULD NOT_ change other functionality based on the role of an element that has a value for `aria-roledescription`. For example, an assistive technology that provides functions for navigating to the next [`region`](https://w3c.github.io/aria/#region) or [`button`](https://w3c.github.io/aria/#button) _SHOULD_ allow those functions to navigate to regions and buttons that have an `aria-roledescription`.\n\nThe following two examples show the use of `aria-roledescription` to indicate that a non-interactive container is a \"slide\" in a web-based presentation application.\n\n[Example 43](#example-43)\n\n    <div role=\"article\" aria-roledescription=\"slide\" id=\"slide\" aria-labelledby=\"slideheading\">\n    <h1 id=\"slideheading\">Quarterly Report</h1>\n    <!-- remaining slide contents -->\n    </div>\n\n[Example 44](#example-44)\n\n    <article aria-roledescription=\"slide\" id=\"slide\" aria-labelledby=\"slideheading\">\n    <h1 id=\"slideheading\">Quarterly Report</h1>\n    <!-- remaining slide contents -->\n    </article>\n\nIn the previous examples, a screen reader user might hear \"Quarterly Report, slide\" rather than the more vague \"Quarterly Report, article\" or \"Quarterly Report, group.\"",
      "raw": "\nDefines a human-readable, author-localized description for the role of an element.\n\nSome assistive technologies, such as screen readers, present the role of an element as part of the user experience. Such assistive technologies typically localize the name of the role, and they might customize it as well. Users of these assistive technologies depend on the presentation of the role name, such as \"region,\" \"button,\" or \"slider,\" for an understanding of the purpose of the element and, if it is a widget, how to interact with it.\n\nThe aria-roledescription property gives authors the ability to override how assistive technologies localize and express the name of a role. Thus inappropriately using aria-roledescription might inhibit users' ability to understand or interact with an element. Authors SHOULD limit use of aria-roledescription to clarifying the purpose of non-interactive container roles like group or region, or to providing a more specific description of a widget.\n\nWhen using aria-roledescription, authors SHOULD also ensure that:\n\nThe element to which aria-roledescription is applied has a valid WAI-ARIA role or has an implicit WAI-ARIA role semantic.\n\nThe value of aria-roledescription is not empty or does not contain only whitespace characters.\n\nNote Depending on the assistive technology, user verbosity settings, or other factors, certain elements' role descriptions might not be conveyed. If specifying aria-roledescription on such elements, then the custom role descriptions might also not be conveyed by these assistive technologies.\n\nAdditionally, authors MUST NOT specify aria-roledescription on an element which has an explicit or implicit WAI-ARIA role where aria-roledescription is prohibited.\n\nUser agents MUST NOT expose the aria-roledescription property if any of the following conditions exist:\n\nThe element to which aria-roledescription is applied has an explicit or implicit WAI-ARIA role where aria-roledescription is prohibited.\n\nThe value of aria-roledescription is undefined or the empty string.\n\nAssistive technologies SHOULD use the value of aria-roledescription when presenting the role of an element, but SHOULD NOT change other functionality based on the role of an element that has a value for aria-roledescription. For example, an assistive technology that provides functions for navigating to the next region or button SHOULD allow those functions to navigate to regions and buttons that have an aria-roledescription.\n\nThe following two examples show the use of aria-roledescription to indicate that a non-interactive container is a \"slide\" in a web-based presentation application.\n\nExample 43 <div role=\"article\" aria-roledescription=\"slide\" id=\"slide\" aria-labelledby=\"slideheading\"> <h1 id=\"slideheading\">Quarterly Report</h1> <!-- remaining slide contents --> </div>\n\n\nExample 44 <article aria-roledescription=\"slide\" id=\"slide\" aria-labelledby=\"slideheading\"> <h1 id=\"slideheading\">Quarterly Report</h1> <!-- remaining slide contents --> </article>\n\nIn the previous examples, a screen reader user might hear \"Quarterly Report, slide\" rather than the more vague \"Quarterly Report, article\" or \"Quarterly Report, group.\""
    },
    "usedInRoles": [
      "All elements of the base markup except for the following roles: generic"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-rowcount",
    "idlName": "ariaRowCount",
    "hasElementInternalsMember": true,
    "description": "Defines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the total number of rows in a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex).\n\nIf all of the rows are present in the DOM, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute) as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the total number of rows. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of rows in the full table.\n\nAuthors _MUST_ set the value of [`aria-rowcount`](https://w3c.github.io/aria/#aria-rowcount) to an integer equal to the number of rows in the full table. If the total number of rows is unknown, authors _MUST_ set the value of [`aria-rowcount`](https://w3c.github.io/aria/#aria-rowcount) to `-1` to indicate that the value should not be calculated by the user agent.\n\nThe following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\n[Example 45](#example-45)\n\n    <div role=\"grid\" aria-rowcount=\"2000\">\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"1\">\n          <span role=\"columnheader\">First Name</span>\n          <span role=\"columnheader\">Last Name</span>\n          <span role=\"columnheader\">Company</span>\n          <span role=\"columnheader\">Phone</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"100\">\n          <span role=\"gridcell\">Fred</span>\n          <span role=\"gridcell\">Jackson</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1234</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"101\">\n          <span role=\"gridcell\">Sara</span>\n          <span role=\"gridcell\">James</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1235</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"102\">\n          <span role=\"gridcell\">Taylor</span>\n          <span role=\"gridcell\">Johnson</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1236</span>\n        </div>\n      </div>\n    </div>",
      "raw": "\nDefines the total number of rows in a table, grid, or treegrid. See related aria-rowindex.\n\nIf all of the rows are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the total number of rows. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of the number of rows in the full table.\n\nAuthors MUST set the value of aria-rowcount to an integer equal to the number of rows in the full table. If the total number of rows is unknown, authors MUST set the value of aria-rowcount to -1 to indicate that the value should not be calculated by the user agent.\n\nThe following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\nExample 45 <div role=\"grid\" aria-rowcount=\"2000\"> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"1\"> <span role=\"columnheader\">First Name</span> <span role=\"columnheader\">Last Name</span> <span role=\"columnheader\">Company</span> <span role=\"columnheader\">Phone</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"100\"> <span role=\"gridcell\">Fred</span> <span role=\"gridcell\">Jackson</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1234</span> </div> <div role=\"row\" aria-rowindex=\"101\"> <span role=\"gridcell\">Sara</span> <span role=\"gridcell\">James</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1235</span> </div> <div role=\"row\" aria-rowindex=\"102\"> <span role=\"gridcell\">Taylor</span> <span role=\"gridcell\">Johnson</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1236</span> </div> </div> </div>\n"
    },
    "usedInRoles": ["table"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["grid", "treegrid"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-rowindex",
    "idlName": "ariaRowIndex",
    "hasElementInternalsMember": true,
    "description": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) an [element's](https://dom.spec.whatwg.org/#concept-element) row index or position with respect to the total number of rows within a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-rowindextext`](https://w3c.github.io/aria/#aria-rowindextext), [`aria-rowcount`](https://w3c.github.io/aria/#aria-rowcount), and [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan).\n\nIf all of the rows are present in the DOM, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute) as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the index of each row. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of each row's position with respect to the full table.\n\nAuthors _MUST_ set the value for [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) to an integer greater than or equal to 1, greater than the [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) value of any previous rows, and less than or equal to the number of rows in the full table. For a cell or gridcell which spans multiple rows, authors _MUST_ set the value of [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) to the start of the span.\n\nAuthors _SHOULD_ place [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) on each row. Authors _MAY_ also place [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) on all of the [accessibility children](#dfn-accessibility-child) of each row.\n\nThe following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\n[Example 46](#example-46)\n\n    <div role=\"grid\" aria-rowcount=\"2000\">\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"1\">\n          <span role=\"columnheader\">First Name</span>\n          <span role=\"columnheader\">Last Name</span>\n          <span role=\"columnheader\">Company</span>\n          <span role=\"columnheader\">Phone</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"100\">\n          <span role=\"gridcell\">Fred</span>\n          <span role=\"gridcell\">Jackson</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1234</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"101\">\n          <span role=\"gridcell\">Sara</span>\n          <span role=\"gridcell\">James</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1235</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"102\">\n          <span role=\"gridcell\">Taylor</span>\n          <span role=\"gridcell\">Johnson</span>\n          <span role=\"gridcell\">Acme, Inc.</span>\n          <span role=\"gridcell\">555-1236</span>\n        </div>\n      </div>\n    </div>\n\nThe following example shows the grid from the previous example with [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) also placed on all of the [accessibility children](#dfn-accessibility-child) of each row.\n\n[Example 47](#example-47)\n\n    <div role=\"grid\" aria-rowcount=\"2000\">\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"1\">\n          <span role=\"columnheader\" aria-rowindex=\"1\">First Name</span>\n          <span role=\"columnheader\" aria-rowindex=\"1\">Last Name</span>\n          <span role=\"columnheader\" aria-rowindex=\"1\">Company</span>\n          <span role=\"columnheader\" aria-rowindex=\"1\">Phone</span>\n        </div>\n      </div>\n      <div role=\"rowgroup\">\n        <div role=\"row\" aria-rowindex=\"100\">\n          <span role=\"gridcell\" aria-rowindex=\"100\">Fred</span>\n          <span role=\"gridcell\" aria-rowindex=\"100\">Jackson</span>\n          <span role=\"gridcell\" aria-rowindex=\"100\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-rowindex=\"100\">555-1234</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"101\">\n          <span role=\"gridcell\" aria-rowindex=\"101\">Sara</span>\n          <span role=\"gridcell\" aria-rowindex=\"101\">James</span>\n          <span role=\"gridcell\" aria-rowindex=\"101\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-rowindex=\"101\">555-1235</span>\n        </div>\n        <div role=\"row\" aria-rowindex=\"102\">\n          <span role=\"gridcell\" aria-rowindex=\"102\">Taylor</span>\n          <span role=\"gridcell\" aria-rowindex=\"102\">Johnson</span>\n          <span role=\"gridcell\" aria-rowindex=\"102\">Acme, Inc.</span>\n          <span role=\"gridcell\" aria-rowindex=\"102\">555-1236</span>\n        </div>\n      </div>\n    </div>",
      "raw": "Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid. See related aria-rowindextext, aria-rowcount, and aria-rowspan.\n\nIf all of the rows are present in the DOM, it is not necessary to set this attribute as the user agent can automatically calculate the index of each row. However, if only a portion of the rows is present in the DOM at a given moment, this attribute is needed to provide an explicit indication of each row's position with respect to the full table.\n\nAuthors MUST set the value for aria-rowindex to an integer greater than or equal to 1, greater than the aria-rowindex value of any previous rows, and less than or equal to the number of rows in the full table. For a cell or gridcell which spans multiple rows, authors MUST set the value of aria-rowindex to the start of the span.\n\nAuthors SHOULD place aria-rowindex on each row. Authors MAY also place aria-rowindex on all of the accessibility children of each row. The following example shows a grid with 2000 rows, of which the first row and rows 100 through 102 are displayed to the user.\n\nExample 46 <div role=\"grid\" aria-rowcount=\"2000\"> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"1\"> <span role=\"columnheader\">First Name</span> <span role=\"columnheader\">Last Name</span> <span role=\"columnheader\">Company</span> <span role=\"columnheader\">Phone</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"100\"> <span role=\"gridcell\">Fred</span> <span role=\"gridcell\">Jackson</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1234</span> </div> <div role=\"row\" aria-rowindex=\"101\"> <span role=\"gridcell\">Sara</span> <span role=\"gridcell\">James</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1235</span> </div> <div role=\"row\" aria-rowindex=\"102\"> <span role=\"gridcell\">Taylor</span> <span role=\"gridcell\">Johnson</span> <span role=\"gridcell\">Acme, Inc.</span> <span role=\"gridcell\">555-1236</span> </div> </div> </div>\n\nThe following example shows the grid from the previous example with aria-rowindex also placed on all of the accessibility children of each row.\n\nExample 47 <div role=\"grid\" aria-rowcount=\"2000\"> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"1\"> <span role=\"columnheader\" aria-rowindex=\"1\">First Name</span> <span role=\"columnheader\" aria-rowindex=\"1\">Last Name</span> <span role=\"columnheader\" aria-rowindex=\"1\">Company</span> <span role=\"columnheader\" aria-rowindex=\"1\">Phone</span> </div> </div> <div role=\"rowgroup\"> <div role=\"row\" aria-rowindex=\"100\"> <span role=\"gridcell\" aria-rowindex=\"100\">Fred</span> <span role=\"gridcell\" aria-rowindex=\"100\">Jackson</span> <span role=\"gridcell\" aria-rowindex=\"100\">Acme, Inc.</span> <span role=\"gridcell\" aria-rowindex=\"100\">555-1234</span> </div> <div role=\"row\" aria-rowindex=\"101\"> <span role=\"gridcell\" aria-rowindex=\"101\">Sara</span> <span role=\"gridcell\" aria-rowindex=\"101\">James</span> <span role=\"gridcell\" aria-rowindex=\"101\">Acme, Inc.</span> <span role=\"gridcell\" aria-rowindex=\"101\">555-1235</span> </div> <div role=\"row\" aria-rowindex=\"102\"> <span role=\"gridcell\" aria-rowindex=\"102\">Taylor</span> <span role=\"gridcell\" aria-rowindex=\"102\">Johnson</span> <span role=\"gridcell\" aria-rowindex=\"102\">Acme, Inc.</span> <span role=\"gridcell\" aria-rowindex=\"102\">555-1236</span> </div> </div> </div>\n"
    },
    "usedInRoles": ["cell", "row"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "gridcell", "rowheader"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-rowindextext",
    "idlName": "ariaRowIndexText",
    "hasElementInternalsMember": true,
    "description": "Defines a human readable text alternative of aria-rowindex. See related aria-colindextext.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "128"
        },
        "chrome_android": {
          "version_added": "128"
        },
        "edge": {
          "version_added": "128"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": false
        },
        "opera": {
          "version_added": "114"
        },
        "opera_android": {
          "version_added": "85"
        },
        "safari": {
          "version_added": false
        },
        "safari_ios": {
          "version_added": false
        },
        "samsunginternet_android": {
          "version_added": false
        },
        "webview_android": {
          "version_added": "128"
        },
        "webview_ios": {
          "version_added": false
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) a human readable text alternative of [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex). See related [`aria-colindextext`](https://w3c.github.io/aria/#aria-colindextext).\n\nAuthors _SHOULD_ only use `aria-rowindextext` when the provided or calculated value of [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) is not meaningful or does not reflect the displayed index, as can be seen in the game Battleship.\n\nAuthors _SHOULD NOT_ use `aria-rowindextext` as a replacement for [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) because some assistive technologies rely upon the numeric row index for the purpose of keeping track of the user's position or providing alternative table navigation.\n\nAuthors _SHOULD_ place `aria-rowindextext` on each row. Authors _MAY_ also place `aria-rowindextext` on all of the [accessibility children](#dfn-accessibility-child) of each row.",
      "raw": "\nDefines a human readable text alternative of aria-rowindex. See related aria-colindextext.\n\nAuthors SHOULD only use aria-rowindextext when the provided or calculated value of aria-rowindex is not meaningful or does not reflect the displayed index, as can be seen in the game Battleship.\n\nAuthors SHOULD NOT use aria-rowindextext as a replacement for aria-rowindex because some assistive technologies rely upon the numeric row index for the purpose of keeping track of the user's position or providing alternative table navigation.\n\nAuthors SHOULD place aria-rowindextext on each row. Authors MAY also place aria-rowindextext on all of the accessibility children of each row."
    },
    "usedInRoles": ["cell", "row"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "gridcell", "rowheader"],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  },
  {
    "name": "aria-rowspan",
    "idlName": "ariaRowSpan",
    "hasElementInternalsMember": true,
    "description": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the number of rows spanned by a cell or gridcell within a [`table`](https://w3c.github.io/aria/#table), [`grid`](https://w3c.github.io/aria/#grid), or [`treegrid`](https://w3c.github.io/aria/#treegrid). See related [`aria-rowindex`](https://w3c.github.io/aria/#aria-rowindex) and [`aria-colspan`](https://w3c.github.io/aria/#aria-colspan).\n\nThis [attribute](https://dom.spec.whatwg.org/#concept-attribute) is intended for cells and gridcells which are not contained in a native table. When defining the row span of cells or gridcells in a native table, authors _SHOULD_ use the host language's attribute instead of [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan). If [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan) is used on an element for which the host language provides an equivalent attribute, [user agents](https://infra.spec.whatwg.org/#user-agent) _MUST_ ignore the value of [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan) and instead expose the value of the host language's attribute to [assistive technologies](#dfn-assistive-technologies).\n\nAuthors _MUST_ set the value of [`aria-rowspan`](https://w3c.github.io/aria/#aria-rowspan) to an integer greater than or equal to 0 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same column. Setting the value to 0 indicates that the cell or gridcell is to span all the remaining rows in the row group.",
      "raw": "Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid. See related aria-rowindex and aria-colspan.\n\nThis attribute is intended for cells and gridcells which are not contained in a native table. When defining the row span of cells or gridcells in a native table, authors SHOULD use the host language's attribute instead of aria-rowspan. If aria-rowspan is used on an element for which the host language provides an equivalent attribute, user agents MUST ignore the value of aria-rowspan and instead expose the value of the host language's attribute to assistive technologies.\n\nAuthors MUST set the value of aria-rowspan to an integer greater than or equal to 0 and less than the value which would cause the cell or gridcell to overlap the next cell or gridcell in the same column. Setting the value to 0 indicates that the cell or gridcell is to span all the remaining rows in the row group.\n"
    },
    "usedInRoles": ["cell"],
    "relatedConcepts": [],
    "inheritsIntoRoles": ["columnheader", "rowheader"],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-setsize",
    "idlName": "ariaSetSize",
    "hasElementInternalsMember": true,
    "description": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "84"
        },
        "chrome_android": {
          "version_added": "84"
        },
        "edge": {
          "version_added": "84"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "11.0"
        },
        "opera": {
          "version_added": "70"
        },
        "opera_android": {
          "version_added": "60"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "14.0"
        },
        "webview_android": {
          "version_added": "84"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related [`aria-posinset`](https://w3c.github.io/aria/#aria-posinset).\n\nThis [property](#dfn-property) is marked on the members of a set, not the container element that collects the members of the set. To orient the user by saying an element is \"item X out of Y,\" the [assistive technologies](#dfn-assistive-technologies) would use X equal to the [`aria-posinset`](https://w3c.github.io/aria/#aria-posinset) [attribute](https://dom.spec.whatwg.org/#concept-attribute) and Y equal to the `aria-setsize` attribute.\n\nIf all items up to the current item in a set are present in the document structure, it is not necessary to set this [attribute](https://dom.spec.whatwg.org/#concept-attribute), as the [user agent](https://infra.spec.whatwg.org/#user-agent) can automatically calculate the position for these items. However, if all previous items in the set are not present in the document structure at a given moment, the author _MUST_ set this [attribute](https://dom.spec.whatwg.org/#concept-attribute)to provide an explicit indication of an element's position.\n\nWhen specifying `aria-setsize`, authors _MUST_ set the value to an integer equal to the number of items in the set. If the total number of items is unknown, authors _SHOULD_ set the value of `aria-setsize` to `-1`.\n\nWhen specifying `aria-setsize` on a [`menuitem`](https://w3c.github.io/aria/#menuitem), [`menuitemcheckbox`](https://w3c.github.io/aria/#menuitemcheckbox), or [`menuitemradio`](https://w3c.github.io/aria/#menuitemradio), authors _SHOULD_ set the value of `aria-setsize` based on the total number of items in the [`menu`](https://w3c.github.io/aria/#menu), excluding any separators.\n\nThe following example shows items 5 through 8 in a set of 16.\n\n[Example 48](#example-48)\n\n    <h2 id=\"label_fruit\"> Available Fruit </h2>\n    <ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li>\n      <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li>\n    </ul>\n\nThe following example shows items 5 through 8 in a set whose total size is unknown.\n\n[Example 49](#example-49)\n\n    <h2 id=\"label_fruit\"> Available Fruit </h2>\n    <ul role=\"listbox\" aria-labelledby=\"label_fruit\">\n      <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"5\"> apples </li>\n      <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"6\"> bananas </li>\n      <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"7\"> cantaloupes </li>\n      <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"8\"> dates </li>\n    </ul>",
      "raw": "Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM. See related aria-posinset.\n\nThis property is marked on the members of a set, not the container element that collects the members of the set. To orient the user by saying an element is \"item X out of Y,\" the assistive technologies would use X equal to the aria-posinset attribute and Y equal to the aria-setsize attribute.\n\nIf all items up to the current item in a set are present in the document structure, it is not necessary to set this attribute, as the user agent can automatically calculate the position for these items. However, if all previous items in the set are not present in the document structure at a given moment, the author MUST set this attributeto provide an explicit indication of an element's position.\n\nWhen specifying aria-setsize, authors MUST set the value to an integer equal to the number of items in the set. If the total number of items is unknown, authors SHOULD set the value of aria-setsize to -1.\n\nWhen specifying aria-setsize on a menuitem, menuitemcheckbox, or menuitemradio, authors SHOULD set the value of aria-setsize based on the total number of items in the menu, excluding any separators.\n\nThe following example shows items 5 through 8 in a set of 16.\n\nExample 48 <h2 id=\"label_fruit\"> Available Fruit </h2> <ul role=\"listbox\" aria-labelledby=\"label_fruit\"> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"5\"> apples </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"6\"> bananas </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"7\"> cantaloupes </li> <li role=\"option\" aria-setsize=\"16\" aria-posinset=\"8\"> dates </li> </ul>\n\nThe following example shows items 5 through 8 in a set whose total size is unknown.\n\nExample 49 <h2 id=\"label_fruit\"> Available Fruit </h2> <ul role=\"listbox\" aria-labelledby=\"label_fruit\"> <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"5\"> apples </li> <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"6\"> bananas </li> <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"7\"> cantaloupes </li> <li role=\"option\" aria-setsize=\"-1\" aria-posinset=\"8\"> dates </li> </ul>\n"
    },
    "usedInRoles": [
      "article",
      "comment",
      "listitem",
      "menuitem",
      "option",
      "radio",
      "row",
      "tab"
    ],
    "relatedConcepts": [],
    "inheritsIntoRoles": [
      "comment",
      "menuitemcheckbox",
      "menuitemradio",
      "treeitem"
    ],
    "type": {
      "type": "integer",
      "description": "A numerical value without a fractional component.",
      "values": []
    }
  },
  {
    "name": "aria-sort",
    "idlName": "ariaSort",
    "hasElementInternalsMember": true,
    "description": "Indicates if items in a table or grid are sorted in ascending or descending order.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Indicates](#dfn-indicates) if items in a table or grid are sorted in ascending or descending order.\n\nAuthors _SHOULD_ only apply this [property](#dfn-property) to table headers or grid headers. If the property is not provided, there is no defined sort order. For each table or grid, authors _SHOULD_ apply [`aria-sort`](https://w3c.github.io/aria/#aria-sort) to only one header at a time.",
      "raw": "\nIndicates if items in a table or grid are sorted in ascending or descending order.\n\nAuthors SHOULD only apply this property to table headers or grid headers. If the property is not provided, there is no defined sort order. For each table or grid, authors SHOULD apply aria-sort to only one header at a time.\n"
    },
    "usedInRoles": ["columnheader", "rowheader"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [],
    "type": {
      "type": "token",
      "description": "One of a limited set of allowed values. The default value is defined in each attribute's Values table, as specified in the\nAttribute Values section.",
      "values": [
        {
          "name": "ascending",
          "description": "Items are sorted in ascending order.",
          "default": false
        },
        {
          "name": "descending",
          "description": "Items are sorted in descending order.",
          "default": false
        },
        {
          "name": "none",
          "description": "There is no defined sort applied.",
          "default": true
        },
        {
          "name": "other",
          "description": "A sort algorithm other than ascending or descending has been applied.",
          "default": false
        }
      ]
    }
  },
  {
    "name": "aria-valuemax",
    "idlName": "ariaValueMax",
    "hasElementInternalsMember": true,
    "description": "Defines the maximum allowed value for a range widget.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the maximum allowed value for a range [widget](#dfn-widget).\n\nAuthors _MUST_ ensure the value of [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax) is greater than or equal to the value of [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin). If the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) has a known maximum and minimum, the author _SHOULD_ provide properties for [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax) and [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin).\n\nNote\n\nA range widget starts with a given value, which can be increased until reaching the maximum value, defined by this [property](#dfn-property). Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.",
      "raw": "\nDefines the maximum allowed value for a range widget.\n\nAuthors MUST ensure the value of aria-valuemax is greater than or equal to the value of aria-valuemin. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\nNote A range widget starts with a given value, which can be increased until reaching the maximum value, defined by this property. Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.\n"
    },
    "usedInRoles": ["range", "scrollbar", "separator", "slider", "spinbutton"],
    "relatedConcepts": ["<input type=\"range\"> element max attribute in HTML"],
    "inheritsIntoRoles": [
      "meter",
      "progressbar",
      "scrollbar",
      "slider",
      "spinbutton"
    ],
    "type": {
      "type": "number",
      "description": "Any real numerical value.",
      "values": []
    }
  },
  {
    "name": "aria-valuemin",
    "idlName": "ariaValueMin",
    "hasElementInternalsMember": true,
    "description": "Defines the minimum allowed value for a range widget.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the minimum allowed value for a range [widget](#dfn-widget).\n\nAuthors _MUST_ ensure the value of [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin) is less than or equal to the value of [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax). If the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) has a known maximum and minimum, the author _SHOULD_ provide properties for [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax) and [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin).\n\nNote\n\nA range widget starts with a given value, which can be decreased until reaching the minimum value, defined by this [property](#dfn-property). Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.",
      "raw": "\nDefines the minimum allowed value for a range widget.\n\nAuthors MUST ensure the value of aria-valuemin is less than or equal to the value of aria-valuemax. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\nNote A range widget starts with a given value, which can be decreased until reaching the minimum value, defined by this property. Declaring the minimum and maximum values allows assistive technology to convey the size of the range to users.\n"
    },
    "usedInRoles": ["range", "scrollbar", "separator", "slider", "spinbutton"],
    "relatedConcepts": ["<input type=\"range\"> element min attribute in HTML"],
    "inheritsIntoRoles": [
      "meter",
      "progressbar",
      "scrollbar",
      "slider",
      "spinbutton"
    ],
    "type": {
      "type": "number",
      "description": "Any real numerical value.",
      "values": []
    }
  },
  {
    "name": "aria-valuenow",
    "idlName": "ariaValueNow",
    "hasElementInternalsMember": true,
    "description": "Defines the current value for a range widget. See related aria-valuetext.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the current value for a range [widget](#dfn-widget). See related [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext).\n\nThis property is used, for example, on a range widget such as a slider or progress bar.\n\nIf the current value is not known (for example, an indeterminate progress bar), the author _SHOULD NOT_ set the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) [attribute](https://dom.spec.whatwg.org/#concept-attribute). If the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) attribute is absent, no information is implied about the current value. If the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) has a known maximum and minimum, the author _SHOULD_ provide properties for [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax) and [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin).\n\nThe value of [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) is a decimal number. If the range is a set of numeric values, then [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) is one of those values. For example, if the range is \\[0, 1\\], a valid [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) is 0.5. A value outside the range, such as -2.5 or 1.1, is invalid.\n\nFor [`progressbar`](https://w3c.github.io/aria/#progressbar) elements and [`scrollbar`](https://w3c.github.io/aria/#scrollbar) elements, assistive technologies _SHOULD_ render the value to users as a percent, calculated as a position on the range from [`aria-valuemin`](https://w3c.github.io/aria/#aria-valuemin) to [`aria-valuemax`](https://w3c.github.io/aria/#aria-valuemax) if both are defined, otherwise the actual value with a percent indicator. For elements with role [`slider`](https://w3c.github.io/aria/#slider) and [`spinbutton`](https://w3c.github.io/aria/#spinbutton), assistive technologies _SHOULD_ render the actual value to users.\n\nWhen the rendered value cannot be accurately represented as a number, authors _SHOULD_ use the [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) attribute in conjunction with [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) to provide a user-friendly representation of the range's current value. For example, a slider might have rendered values of `small`, `medium`, and `large`. In this case, the values of [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) would be one of the strings: `small`, `medium`, or `large`.\n\nNote\n\nIf [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) is specified, assistive technologies render that instead of the value of [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow).",
      "raw": "\nDefines the current value for a range widget. See related aria-valuetext. This property is used, for example, on a range widget such as a slider or progress bar.\n\nIf the current value is not known (for example, an indeterminate progress bar), the author SHOULD NOT set the aria-valuenow attribute. If the aria-valuenow attribute is absent, no information is implied about the current value. If the aria-valuenow has a known maximum and minimum, the author SHOULD provide properties for aria-valuemax and aria-valuemin.\n\nThe value of aria-valuenow is a decimal number. If the range is a set of numeric values, then aria-valuenow is one of those values. For example, if the range is [0, 1], a valid aria-valuenow is 0.5. A value outside the range, such as -2.5 or 1.1, is invalid.\n\nFor progressbar elements and scrollbar elements, assistive technologies SHOULD render the value to users as a percent, calculated as a position on the range from aria-valuemin to aria-valuemax if both are defined, otherwise the actual value with a percent indicator. For elements with role slider and spinbutton, assistive technologies SHOULD render the actual value to users.\n\nWhen the rendered value cannot be accurately represented as a number, authors SHOULD use the aria-valuetext attribute in conjunction with aria-valuenow to provide a user-friendly representation of the range's current value. For example, a slider might have rendered values of small, medium, and large. In this case, the values of aria-valuetext would be one of the strings: small, medium, or large.\n\nNoteIf aria-valuetext is specified, assistive technologies render that instead of the value of aria-valuenow."
    },
    "usedInRoles": [
      "meter",
      "range",
      "scrollbar",
      "separator",
      "slider",
      "spinbutton"
    ],
    "relatedConcepts": [
      "<input type=\"range\"> element value attribute in HTML"
    ],
    "inheritsIntoRoles": [
      "meter",
      "progressbar",
      "scrollbar",
      "slider",
      "spinbutton"
    ],
    "type": {
      "type": "number",
      "description": "Any real numerical value.",
      "values": []
    }
  },
  {
    "name": "aria-valuetext",
    "idlName": "ariaValueText",
    "hasElementInternalsMember": true,
    "description": "Defines the human readable text alternative of aria-valuenow for a range widget.",
    "compat": {
      "status": {
        "deprecated": false,
        "experimental": false,
        "standard_track": true
      },
      "support": {
        "chrome": {
          "version_added": "81"
        },
        "chrome_android": {
          "version_added": "81"
        },
        "edge": {
          "version_added": "81"
        },
        "firefox": {
          "version_added": "119"
        },
        "firefox_android": {
          "version_added": "119"
        },
        "ie": {
          "version_added": false
        },
        "oculus": {
          "version_added": "9.0"
        },
        "opera": {
          "version_added": "68"
        },
        "opera_android": {
          "version_added": "58"
        },
        "safari": {
          "version_added": "16.4"
        },
        "safari_ios": {
          "version_added": "16.4"
        },
        "samsunginternet_android": {
          "version_added": "13.0"
        },
        "webview_android": {
          "version_added": "81"
        },
        "webview_ios": {
          "version_added": "16.4"
        }
      }
    },
    "fullDescription": {
      "markdown": "[Defines](#dfn-defines) the human readable text alternative of [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) for a range [widget](#dfn-widget).\n\nThis property is used, for example, on a range widget such as a slider or progress bar.\n\nIf the [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) attribute is set, authors _SHOULD_ also set the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) attribute, unless that value is unknown (for example, on an indeterminate [`progressbar`](https://w3c.github.io/aria/#progressbar)).\n\nAuthors _SHOULD_ only set the [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) attribute when the rendered value cannot be meaningfully represented as a number. For example, a slider might have rendered values of `small`, `medium`, and `large`. In this case, the values of [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) could range from 1 through 3, which indicate the position of each value in the value space, but the [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) would be one of the strings: `small`, `medium`, or `large`. If the [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) attribute is absent, the [assistive technologies](#dfn-assistive-technologies) will rely solely on the [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow) attribute for the current value.\n\nIf [`aria-valuetext`](https://w3c.github.io/aria/#aria-valuetext) is specified, assistive technologies _SHOULD_ render that value instead of the value of [`aria-valuenow`](https://w3c.github.io/aria/#aria-valuenow).",
      "raw": "\nDefines the human readable text alternative of aria-valuenow for a range widget. This property is used, for example, on a range widget such as a slider or progress bar.\n\nIf the aria-valuetext attribute is set, authors SHOULD also set the aria-valuenow attribute, unless that value is unknown (for example, on an indeterminate progressbar).\n\nAuthors SHOULD only set the aria-valuetext attribute when the rendered value cannot be meaningfully represented as a number. For example, a slider might have rendered values of small, medium, and large. In this case, the values of aria-valuenow could range from 1 through 3, which indicate the position of each value in the value space, but the aria-valuetext would be one of the strings: small, medium, or large. If the aria-valuetext attribute is absent, the assistive technologies will rely solely on the aria-valuenow attribute for the current value.\n\nIf aria-valuetext is specified, assistive technologies SHOULD render that value instead of the value of aria-valuenow."
    },
    "usedInRoles": ["range", "separator", "spinbutton"],
    "relatedConcepts": [],
    "inheritsIntoRoles": [
      "meter",
      "progressbar",
      "scrollbar",
      "slider",
      "spinbutton"
    ],
    "type": {
      "type": "string",
      "description": "Unconstrained value type.",
      "values": []
    }
  }
]
